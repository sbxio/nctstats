{"version":3,"sources":["store/messages/entities.js","store/messages/eventTypes.js","store/messages/messagesReducer.js","store/reducer.js","constants/reducers.js","store/active/activeReducer.js","store/active/activeActionTypes.js","store/community/communityReducer.js","store/community/communityActionTypes.js","store/store.js","components/error/ErrorBoundary.jsx","components/PolyswarmLogo.jsx","components/charting/SvgBarChart.jsx","constants/colors.js","components/Nectar.jsx","functions/getAverage.js","hooks/useMessageGroupBy.js","views/dashboard/assertion/AssertionBidByBlock.jsx","views/dashboard/assertion/AssertionBidByBounty.jsx","views/dashboard/assertion/AssertionBidTotal.jsx","views/dashboard/assertion/AssertionCount.jsx","views/dashboard/assertion/AssertionTable.jsx","views/dashboard/bounty/BountyAmountByBlock.jsx","views/dashboard/bounty/BountyAmountTotal.jsx","views/dashboard/bounty/BountyCount.jsx","views/dashboard/bounty/BountyTable.jsx","views/dashboard/Dashboard.jsx","store/community/communityActions.js","constants/communities.js","views/front/Front.jsx","store/active/activeActions.js","views/nomatch/NoMatch.jsx","views/main/Main.jsx","views/App.jsx","serviceWorker.js","index.js"],"names":["MessageBlock","message","this","timestamp","Date","now","block_number","data","number","MessageEvent","txhash","MessageBounty","guid","author","amount","Math","pow","MessageAssertion","bounty_guid","bid","MessageReveal","verdict","verdicts","BLOCK","BOUNTY","ASSERTION","REVEAL","VOTE","QUORUM","SETTLED","INITIALIZED_CHANNEL","_producer","entity","draftState","count","last","messages","slice","_reducer","combineReducers","state","action","type","community_url","produce","draft","is_connected","connection","initiated","succeded","closed","errors","last_error","push","event","err","Object","keys","eventTypes","reduce","acc","cur","entities","total_amount","total_bid","MessageSettled","total_payout","payout","reducer","store","middlewareEnhancer","applyMiddleware","thunk","composedEnhancers","compose","window","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","undefined","configureStore","ErrorBoundary","props","hasError","error","children","React","Component","PolyswarmLogo","id","viewBox","fill","d","Svg","W","H","preserveAspectRatio","style","width","height","SvgBar","_posX","w","gapW","noOfDataPoints","currentDataPointIndex","h","SvgBarChart","_W","maxNoOfDataPoints","map","i","key","barFill","length","avg","stroke","avgLineStrokeColor","strokeWidth","avgLineStrokeWidth","defaultProps","Nectar","toFixed","split","integer","decimal","opacity","getAverage","field","accumulator","currentValue","useMessageGroupBy","community","eventType","dataLengthLimit","groupByField","nctField","useSelector","useState","setData","useEffect","index","findIndex","o","shift","AssertionBidByBlock","max","display","flexDirection","margin","minWidth","alignSelf","fontWeight","whiteSpace","AssertionBidByBounty","AssertionBidTotal","textAlign","AssertionCount","AssertionTable","BountyAmountByBlock","BountyAmountTotal","BountyCount","BountyTable","HorizontalDivider","VerticalDivider","Dashboard","isConnected","alignItems","padding","background","borderRadius","backgroundColor","color","border","animation","flexWrap","textTransform","justifyContent","registerCommunityAction","dispatch","conn","WebSocket","onopen","onclose","onerror","onmessage","Promise","resolve","reject","text","then","catch","JSON","parse","_connect","rho","Front","useDispatch","communities","communityActions","NoMatch","to","tabIndex","Main","exact","path","component","App","basename","process","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"unBAAaA,EACX,WAAYC,GAAU,oBACpBC,KAAKC,UAAYC,KAAKC,MACtBH,KAAKD,QAAUA,EACfC,KAAKI,aAAeL,EAAQM,KAAKC,QAIxBC,EACX,WAAYR,GAAU,oBACpBC,KAAKC,UAAYC,KAAKC,MACtBH,KAAKD,QAAUA,EACfC,KAAKI,aAAeL,EAAQK,aAC5BJ,KAAKQ,OAAST,EAAQS,QAIbC,EAAb,kDACE,WAAYV,GAAU,IAAD,8BACnB,cAAMA,IAEDW,KAAOX,EAAQM,KAAKK,KACzB,EAAKC,OAASZ,EAAQM,KAAKM,OAC3B,EAAKC,OAASb,EAAQM,KAAKO,OAASC,KAAKC,IAAI,GAAI,IAL9B,EADvB,UAAmCP,GAUtBQ,EAAb,kDACE,WAAYhB,GAAU,IAAD,8BACnB,cAAMA,IAEDiB,YAAcjB,EAAQM,KAAKW,YAChC,EAAKL,OAASZ,EAAQM,KAAKM,OAC3B,EAAKM,IAAMlB,EAAQM,KAAKY,IAAMJ,KAAKC,IAAI,GAAI,IALxB,EADvB,UAAsCP,GAUzBW,EAAb,kDACE,WAAYnB,GAAU,IAAD,8BACnB,cAAMA,IAEDiB,YAAcjB,EAAQM,KAAKW,YAChC,EAAKL,OAASZ,EAAQM,KAAKM,OAC3B,EAAKQ,QAAUpB,EAAQM,KAAKe,SAAS,GALlB,EADvB,UAAmCb,GCrCtBc,EAAQ,QACRC,EAAS,SACTC,EAAY,YACZC,EAAS,SACTC,EAAO,OACPC,EAAS,SACTC,EAAU,iBACVC,EAAsB,sBCE/BC,EAAY,SAACC,EAAQC,GACvBA,EAAWC,OAAS,EACpBD,EAAWE,KAAOH,EAClBC,EAAWG,SAAX,CAAuBJ,GAAvB,mBAAkCC,EAAWG,SAASC,MAAM,EALhD,OCCRC,EAAWC,aAAe,mBCRV,UCEO,WAA2B,IAA1BC,EAAyB,uDAAjB,KAAMC,EAAW,uCACrD,OAAQA,EAAOC,MACb,ICJoB,WDKlB,OAAOD,EAAOE,cAEhB,QACE,OAAOH,MFAmB,cCPP,aGGO,eAACA,EAAD,uDAAS,GAAIC,EAAb,8CAC9BG,YAAQJ,GAAO,SAAAK,GACb,OAAQJ,EAAOC,MACb,ICP2B,oBDsBzB,YAdAG,EAAMJ,EAAOE,eAAiB,CAC5BA,cAAeF,EAAOE,cACtBG,cAAc,EACdC,WAAY,CACVC,UAAW5C,KAAKC,MAChB4C,SAAU,KACVC,OAAQ,KACRC,OAAQ,IAEVf,SAAU,CACRD,KAAM,KACNiB,WAAY,QAKlB,ICvBsC,+BD0BpC,OAFAP,EAAMJ,EAAOE,eAAeG,cAAe,OAC3CD,EAAMJ,EAAOE,eAAeI,WAAWE,SAAW7C,KAAKC,OAGzD,IC1BsC,+BD6BpC,OAFAwC,EAAMJ,EAAOE,eAAeG,cAAe,OAC3CD,EAAMJ,EAAOE,eAAeI,WAAWG,OAAS9C,KAAKC,OAGvD,IC9BqC,8BDmCnC,YAJAwC,EAAMJ,EAAOE,eAAeI,WAAWI,OAAOE,KAAK,CACjDlD,UAAWC,KAAKC,MAChBiD,MAAOb,EAAOa,QAIlB,ICnCsC,+BDwCpC,YAJAT,EAAMJ,EAAOE,eAAeP,SAASD,KAAO,CAC1ChC,UAAWC,KAAKC,MAChBiD,MAAOb,EAAOa,QAIlB,ICzCiD,0CD0C/C,OAEF,IC3C8C,uCDgD5C,YAJAT,EAAMJ,EAAOE,eAAeP,SAASgB,WAAa,CAChDjD,UAAWC,KAAKC,MAChBkD,IAAKd,EAAOc,MAIhB,QACE,cJnDwB,cCNR,YFaO,eAACf,EAAD,uDAAS,GAAIC,EAAb,8CAC7BG,YAAQJ,GAAO,SAAAK,GACb,OAAQJ,EAAOC,MACb,IMlB2B,oBN8BzB,YAXAG,EAAMJ,EAAOE,eAAiBa,OAAOC,KAAKC,GAAYC,QACpD,SAACC,EAAKC,GAMJ,OALAD,EAAIF,EAAWG,IAAQ,CACrB3B,MAAO,EACPC,KAAM,KACNC,SAAU,IAELwB,IAET,KAIJ,IMzBiD,0CN0B/C,IAAI5B,EACAC,EAEJ,OAAQQ,EAAOlC,KAAK+C,OAClB,KAAKI,EAIH,OAHA1B,EAAS,IAAI8B,EAAsBrB,EAAOlC,MAC1C0B,EAAaY,EAAMJ,EAAOE,eAAee,QACzC3B,EAAUC,EAAQC,GAGpB,KAAKyB,EAMH,OALA1B,EAAS,IAAI8B,EAAuBrB,EAAOlC,MAC3C0B,EAAaY,EAAMJ,EAAOE,eAAee,GACzC3B,EAAUC,EAAQC,QAClBA,EAAW8B,cACR9B,EAAW8B,cAAgB,GAAK/B,EAAOlB,QAG5C,KAAK4C,EAKH,OAJA1B,EAAS,IAAI8B,EAA0BrB,EAAOlC,MAC9C0B,EAAaY,EAAMJ,EAAOE,eAAee,GACzC3B,EAAUC,EAAQC,QAClBA,EAAW+B,WAAa/B,EAAW+B,WAAa,GAAKhC,EAAOb,KAG9D,KAAKuC,EAIH,OAHA1B,EAAS,IAAI8B,EAAuBrB,EAAOlC,MAC3C0B,EAAaY,EAAMJ,EAAOE,eAAee,QACzC3B,EAAUC,EAAQC,GAGpB,KAAKyB,EAMH,OALA1B,EAAS,IAAIA,EAAOiC,eAAexB,EAAOlC,MAC1C0B,EAAaY,EAAMJ,EAAOE,eAAee,GACzC3B,EAAUC,EAAQC,QAClBA,EAAWiC,cACRjC,EAAWiC,cAAgB,GAAKlC,EAAOmC,QAG5C,QACE,OAGN,QACE,cCrEwB,IAMnBC,EAAU,SAAC5B,EAAOC,GAC7B,OAAOH,EAASE,EAAOC,IMIZ4B,EAdU,WACrB,IAAMC,EAAqBC,YAAgBC,KAErCC,EAAoBC,YACxBJ,EACAK,OAAOC,6BACHD,OAAOC,+BACP,SAAAC,GAAC,OAAIA,IAIX,OADcC,YAAYV,OAASW,EAAWN,GAI3BO,G,QChBRC,EAAb,kDAKE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACD1C,MAAQ,CACX2C,UAAU,EACVC,MAAO,MAJQ,EALrB,qDAkBI,OAAIlF,KAAKsC,MAAM2C,SACN,4EAGFjF,KAAKgF,MAAMG,YAtBtB,gDAakCD,GAC9B,MAAO,CAACD,UAAU,EAAMC,aAd5B,GAAmCE,IAAMC,W,OCA5BC,EAAgB,SAAAN,GAAK,OAChC,yBAAKO,GAAG,iBAAiBC,QAAQ,aAC/B,0BACEC,KAAMT,EAAMS,KACZC,EAAE,0QAEJ,0BACED,KAAMT,EAAMS,KACZC,EAAE,oRAEJ,0BACED,KAAMT,EAAMS,KACZC,EAAE,4JAEJ,0BACED,KAAMT,EAAMS,KACZC,EAAE,6ICdKC,EAAM,SAAAX,GACjB,OACE,yBACEQ,QAAO,cAASR,EAAMY,EAAf,YAAoBZ,EAAMa,GACjCC,oBAAoB,OACpBC,MAAO,CACLC,MAAO,OACPC,OAAQ,SAGTjB,EAAMG,WAWAe,EAAS,SAAAlB,GACpB,IAAImB,EAAQnB,EAAMY,EAAIZ,EAAMoB,GAAKpB,EAAMoB,EAAIpB,EAAMqB,OAASrB,EAAMsB,eAAiBtB,EAAMuB,sBAAwB,GAC/G,OAAO,0BAAMb,EAAC,YAAOS,EAAP,YAAgBnB,EAAMa,EAAtB,eAA8Bb,EAAMwB,EAApC,cAA2CxB,EAAMoB,EAAjD,cAAwDpB,EAAMwB,EAA9D,MAAqEf,KAAMT,EAAMS,QAcpFgB,EAAc,SAAAzB,GACzB,IAAI0B,EAAK1B,EAAM2B,mBAAqB3B,EAAMoB,EAAIpB,EAAMqB,MAAQrB,EAAMqB,KAClE,OACE,kBAAC,EAAD,CAAKT,EAAGc,EAAIb,EAAGb,EAAMa,GAClBb,EAAM3E,KAAKuG,KAAI,SAACvG,EAAMwG,GAAP,OACd,kBAAC,EAAD,CACEC,IAAKD,EACLpB,KAAMT,EAAM+B,QACZR,sBAAuBM,EACvBP,eAAgBtB,EAAM3E,KAAK2G,OAC3BX,KAAMrB,EAAMqB,KACZT,EAAGc,EACHb,EAAGb,EAAMa,EACTO,EAAGpB,EAAMoB,EACTI,EAAGnG,EAAKmG,OAGZ,0BACEd,EAAC,cAASV,EAAMa,EAAf,iBAAyBb,EAAMiC,IAA/B,cAAwCP,EAAxC,MACDQ,OAAQlC,EAAMmC,mBACdC,YAAapC,EAAMqC,uBAiB3BZ,EAAYa,aAAe,CACzBH,mBChFmB,UDiFnBJ,QChFoB,UDiFpBV,KAAM,EACND,EAAG,I,YEjFQmB,EAAS,SAAAvC,GACpB,IAD6B,EAChBA,EAAMpE,OAAO4G,QAAQ,GACFC,MAAM,KAFT,mBAExBC,EAFwB,KAEfC,EAFe,KAI7B,OACE,8BACE,8BAAOD,GACP,0BAAM3B,MAAO,CAAC6B,QAAS,MACrB,mCACA,8BAAOD,IAET,uCCbOE,EAAa,SAACxH,EAAMyH,GAM/B,OALczH,EAAKoD,QACjB,SAACsE,EAAaC,GAAd,OAA+BD,EAAcC,EAAaF,KAC1D,GAEkBzH,EAAK2G,QAAU,GCA9B,SAASiB,EACdC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMvI,EAAUwI,aACd,SAAAjG,GAAK,OAAIA,EAAK,SAAoB4F,GAAWC,GAAWlG,QAF1D,EAIwBuG,mBAAS,IAJjC,mBAIOnI,EAJP,KAIaoI,EAJb,KA4BA,OAtBAC,qBAAU,WACJ3I,GACF0I,GAAQ,SAAApI,GACN,IAGkB,EAHdsI,EAAQtI,EAAKuI,WACf,SAAAC,GAAC,OAAIA,EAAER,KAAkBtI,EAAQsI,MAEnC,OAAe,IAAXM,GACEtI,EAAK2G,SAAWoB,GAClB/H,EAAKyI,QAED,GAAN,mBACKzI,GADL,qBAEIgI,EAAetI,EAAQsI,IAF3B,kBAE6CtI,EAAQuI,IAFrD,OAKAjI,EAAKsI,GAAOnC,GAAKzG,EAAQuI,GAClB,YAAIjI,SAIhB,CAACN,EAASmI,EAAWC,EAAWC,EAAiBC,EAAcC,IAE3DjI,EC/BT,IAEa0I,EAAsB,SAAA/D,GACjC,IAAM3E,EAAO4H,EAAkBjD,EAAMkD,UAAW1E,EAHpB,GAGiE,eAAgB,OAEvGqC,EAAIxF,EAAK2G,OAASnG,KAAKmI,IAAL,MAAAnI,KAAI,YAAQR,EAAKuG,KAAI,SAAAlB,GAAC,OAAIA,EAAEc,OAAM,EACpDS,EAAMY,EAAWxH,EAAM,KAE7B,OACE,yBAAK0F,MAAO,CAACkD,QAAS,OAAQC,cAAe,QAC3C,6BACE,yBAAKnD,MAAO,CAACoD,OAAQ,gBAArB,mBAXsB,GAWtB,WACA,yBAAKpD,MAAO,CAACE,OAAQ,OAAQD,MAAO,UAClC,kBAAC,EAAD,CACE3F,KAAMA,EACNsG,kBAfkB,GAgBlBd,EAAGA,EACHoB,IAAKA,EACLI,mBAAyB,EAAJxB,EAAS,QAIpC,yBAAKE,MAAO,CAACqD,SAAU,SACvB,yBAAKrD,MAAO,CAACsD,UAAW,aACtB,6BACE,yBAAKtD,MAAO,CAACuD,WAAY,MAAzB,OACA,kBAAC,EAAD,CAAQ1I,OAAQiF,KAElB,yBAAKE,MAAO,CAACE,OAAQ,aACrB,6BACE,yBAAKF,MAAO,CAACuD,WAAY,IAAKC,WAAY,WAA1C,qBACA,kBAAC,EAAD,CAAQ3I,OAAQqG,QC7BbuC,EAAuB,SAAAxE,GAClC,IAAM3E,EAAO4H,EAAkBjD,EAAMkD,UAAW1E,EAHpB,IAGiE,cAAe,OAEtGqC,EAAIxF,EAAK2G,OAASnG,KAAKmI,IAAL,MAAAnI,KAAI,YAAQR,EAAKuG,KAAI,SAAAlB,GAAC,OAAIA,EAAEc,OAAM,EACpDS,EAAMY,EAAWxH,EAAM,KAE7B,OACE,yBAAK0F,MAAO,CAACkD,QAAS,OAAQC,cAAe,QAC3C,6BACE,yBAAKnD,MAAO,CAACoD,OAAQ,gBAArB,mBAXsB,IAWtB,aACA,yBAAKpD,MAAO,CAACE,OAAQ,OAAQD,MAAO,UAClC,kBAAC,EAAD,CACE3F,KAAMA,EACNsG,kBAfkB,IAgBlBd,EAAGA,EACHoB,IAAKA,EACLI,mBAAyB,EAAJxB,EAAS,QAIpC,yBAAKE,MAAO,CAACqD,SAAU,SACvB,yBAAKrD,MAAO,CAACsD,UAAW,aACtB,6BACE,yBAAKtD,MAAO,CAACuD,WAAY,MAAzB,OACA,kBAAC,EAAD,CAAQ1I,OAAQiF,KAElB,yBAAKE,MAAO,CAACE,OAAQ,aACrB,6BACE,yBAAKF,MAAO,CAACuD,WAAY,IAAKC,WAAY,WAA1C,sBACA,kBAAC,EAAD,CAAQ3I,OAAQqG,QChCbwC,EAAoB,SAAAzE,GAC/B,IAAMlB,EAAYyE,aAAY,SAAAjG,GAAK,OAAIA,EAAK,SAAoB0C,EAAMkD,WAAW1E,GAAsBM,aAEvG,OACE,yBAAKiC,MAAO,CAAC2D,UAAW,UACtB,yBAAK3D,MAAO,CAACuD,WAAY,MAAzB,wBACA,kBAAC,EAAD,CAAQ1I,OAAQkD,GAAa,MCPtB6F,EAAiB,SAAA3E,GAC5B,IAAMhD,EAAQuG,aAAY,SAAAjG,GAAK,OAAIA,EAAK,SAAoB0C,EAAMkD,WAAW1E,GAAsBxB,SAEnG,OACE,6BACE,yBAAK+D,MAAO,CAACuD,WAAY,MAAzB,iBACA,6BAAMtH,KCLC4H,EAAiB,SAAA5E,GAC5B,IAAM9C,EAAWqG,aAAY,SAAAjG,GAAK,OAAIA,EAAK,SAAoB0C,EAAMkD,WAAW1E,GAAsBtB,YAEtG,OACE,2BAAO6D,MAAO,CAACqD,SAAS,GAAD,OAAK,IAAM,GAAX,QACrB,+BACE,4BACE,wBAAIrD,MAAO,CAAC2D,UAAW,OAAQN,SAAS,GAAD,OAAK,KAAL,QAAvC,SACA,wBAAIrD,MAAO,CAAC2D,UAAW,OAAQN,SAAS,GAAD,OAAK,GAAL,QAAvC,eACA,wBAAIrD,MAAO,CAAC2D,UAAW,UAAvB,SAGJ,+BACGxH,EAAS0E,KAAI,SAAA7G,GAAO,OACnB,wBAAI+G,IAAG,UAAK5G,KAAKC,MAAV,YAAmBJ,EAAQY,OAA3B,YAAqCZ,EAAQiB,cAClD,wBAAI+E,MAAO,CAACwD,WAAY,WAAYxJ,EAAQK,cAC5C,wBAAI2F,MAAO,CAACwD,WAAY,WAAYxJ,EAAQiB,aAC5C,wBAAI+E,MAAO,CAACwD,WAAY,WACtB,kBAAC,EAAD,CAAQ3I,OAAQb,EAAQkB,cCfzB4I,EAAsB,SAAA7E,GACjC,IAAM3E,EAAO4H,EAAkBjD,EAAMkD,UAAW1E,EAHpB,GAG8D,eAAgB,UAEpGqC,EAAIxF,EAAK2G,OAASnG,KAAKmI,IAAL,MAAAnI,KAAI,YAAQR,EAAKuG,KAAI,SAAAlB,GAAC,OAAIA,EAAEc,OAAM,EACpDS,EAAMY,EAAWxH,EAAM,KAE7B,OACE,yBAAK0F,MAAO,CAACkD,QAAS,OAAQC,cAAe,QAC3C,6BACE,yBAAKnD,MAAO,CAACoD,OAAQ,gBAArB,mBAXsB,GAWtB,WACA,yBAAKpD,MAAO,CAACE,OAAQ,OAAQD,MAAO,UAClC,kBAAC,EAAD,CACE3F,KAAMA,EACNsG,kBAfkB,GAgBlBd,EAAGA,EACHoB,IAAKA,EACLI,mBAAyB,EAAJxB,EAAS,QAIpC,yBAAKE,MAAO,CAACqD,SAAU,SACvB,yBAAKrD,MAAO,CAACsD,UAAW,aACtB,6BACE,yBAAKtD,MAAO,CAACuD,WAAY,MAAzB,OACA,kBAAC,EAAD,CAAQ1I,OAAQiF,KAElB,yBAAKE,MAAO,CAACE,OAAQ,aACrB,6BACE,yBAAKF,MAAO,CAACuD,WAAY,IAAKC,WAAY,WAA1C,qBACA,kBAAC,EAAD,CAAQ3I,OAAQqG,QChCb6C,EAAoB,SAAA9E,GAC/B,IAAMnB,EAAe0E,aAAY,SAAAjG,GAAK,OAAIA,EAAK,SAAoB0C,EAAMkD,WAAW1E,GAAmBK,gBAEvG,OACE,yBAAKkC,MAAO,CAAC2D,UAAW,UACtB,yBAAK3D,MAAO,CAACuD,WAAY,MAAzB,wBACA,kBAAC,EAAD,CAAQ1I,OAAQiD,GAAgB,MCPzBkG,GAAc,SAAA/E,GACzB,IAAMhD,EAAQuG,aAAY,SAAAjG,GAAK,OAAIA,EAAK,SAAoB0C,EAAMkD,WAAW1E,GAAmBxB,SAEhG,OACE,6BACE,yBAAK+D,MAAO,CAACuD,WAAY,MAAzB,iBACA,6BAAMtH,KCLCgI,GAAc,SAAAhF,GACzB,IAAM9C,EAAWqG,aAAY,SAAAjG,GAAK,OAAIA,EAAK,SAAoB0C,EAAMkD,WAAW1E,GAAmBtB,YAEnG,OACE,2BAAO6D,MAAO,CAACqD,SAAS,GAAD,OAAK,IAAM,GAAX,QACrB,+BACE,4BACE,wBAAIrD,MAAO,CAAC2D,UAAW,OAAQN,SAAS,GAAD,OAAK,KAAL,QAAvC,SACA,wBAAIrD,MAAO,CAAC2D,UAAW,OAAQN,SAAS,GAAD,OAAK,GAAL,QAAvC,QACA,wBAAIrD,MAAO,CAAC2D,UAAW,UAAvB,YAGJ,+BACGxH,EAAS0E,KAAI,SAAA7G,GAAO,OACnB,wBAAI+G,IAAG,UAAK5G,KAAKC,MAAV,YAAmBJ,EAAQW,OAChC,wBAAIqF,MAAO,CAACwD,WAAY,WAAYxJ,EAAQK,cAC5C,wBAAI2F,MAAO,CAACwD,WAAY,WAAYxJ,EAAQW,MAC5C,wBAAIqF,MAAO,CAACwD,WAAY,WACtB,kBAAC,EAAD,CAAQ3I,OAAQb,EAAQa,iBCPhCqJ,GAAoB,SAAAjF,GAAK,OAAI,yBAAKe,MAAO,CAACqD,SAAU,cACpDc,GAAkB,SAAAlF,GAAK,OAAI,yBAAKe,MAAO,CAACE,OAAQ,UAEzCkE,GAAY,SAAAnF,GACvB,IAAMkD,EAAYK,aAAY,SAAAjG,GAAK,OAAIA,EAAK,UACtC8H,EAAc7B,aAAY,SAAAjG,GAAK,OAAIA,EAAK,UAAqB4F,GAAWtF,gBAE9E,OACE,iCACE,4BAAQmD,MAAO,CAACkD,QAAS,OAAQC,cAAe,MAAOmB,WAAY,SAAUC,QAAS,wBACpF,yBACEvE,MAAO,CACLwE,Wb7BU,Ua8BVtB,QAAS,eACTqB,QAAS,MACTE,aAAc,QAGhB,yBAAKzE,MAAO,CAACE,OAAQ,KAAUD,MAAO,GAAK,KACzC,kBAAC,EAAD,CAAeP,KblCN,caqCb,kBAAC,GAAD,MACA,yBACEM,MAAO,CACL0E,gBb1CU,Ua2CVC,MbzCS,Ua0CTpB,WAAY,IACZqB,OAAO,aAAD,Ob7CI,Wa8CVH,aAAc,MACdvB,QAAS,OACTC,cAAe,MACfmB,WAAY,SACZC,QAAS,oBAGX,0BACEvE,MAAO,CACL0E,gBAAiBL,EbxDV,UAEF,OauDLI,aAAc,MACdvB,QAAS,eACTjD,MAAO,MACPC,OAAQ,MACR2E,UAAWR,GAAe,sCAG9B,yBAAKrE,MAAO,CAACqD,SAAU,aACvB,0BAAMrD,MAAO,CAACwD,WAAY,WAAYrB,KAI1C,yBAAKnC,MAAO,CAACkD,QAAS,OAAQC,cAAe,MAAO2B,SAAU,WAC5D,kBAAC,GAAD,MACA,6BACE,6BACE,wBAAI9E,MAAO,CAACoD,OAAQ,IAAKmB,QAAS,IAAKQ,cAAe,cAAtD,qBACA,kBAAC,EAAD,CAAqB5C,UAAWA,KAElC,kBAAC,GAAD,MACA,6BACE,wBAAInC,MAAO,CAACoD,OAAQ,IAAKmB,QAAS,IAAKQ,cAAe,cAAtD,uBACA,kBAAC,EAAD,CAAqB5C,UAAWA,KAElC,kBAAC,GAAD,MACA,6BACE,wBAAInC,MAAO,CAACoD,OAAQ,IAAKmB,QAAS,IAAKQ,cAAe,cAAtD,wBACA,kBAAC,EAAD,CAAsB5C,UAAWA,MAGrC,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,6BACE,wBAAInC,MAAO,CAACoD,OAAQ,IAAKmB,QAAS,IAAKQ,cAAe,cAAtD,YACA,kBAAC,GAAD,MACA,yBAAK/E,MAAO,CAACkD,QAAS,OAAQC,cAAe,MAAO6B,eAAgB,kBAClE,kBAAC,GAAD,CAAa7C,UAAWA,IACxB,kBAAC,EAAD,CAAmBA,UAAWA,KAEhC,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAaA,UAAWA,KAE1B,kBAAC,GAAD,MACA,6BACE,wBAAInC,MAAO,CAACoD,OAAQ,IAAKmB,QAAS,IAAKQ,cAAe,cAAtD,cACA,kBAAC,GAAD,MACA,yBAAK/E,MAAO,CAACkD,QAAS,OAAQC,cAAe,MAAO6B,eAAgB,kBAClE,kBAAC,EAAD,CAAgB7C,UAAWA,IAC3B,kBAAC,EAAD,CAAmBA,UAAWA,KAEhC,kBAAC,GAAD,MACA,kBAAC,EAAD,CAAgBA,UAAWA,KAE7B,kBAAC,GAAD,SCvCK8C,GAA0B,SAAAvI,GAAa,OAAI,SAAAwI,IArEvC,SAAAxI,GAAa,OAAI,SAAAwI,GAChCA,EAAS,CACPzI,KnBJ6B,oBmBK7BC,kBAGF,IAAMyI,EAAO,IAAIC,UAAU1I,GAE3ByI,EAAKE,OAAS,SAAAhI,GACZ6H,EAAS,CACPzI,KnBXsC,+BmBYtCC,gBACAW,WAIJ8H,EAAKG,QAAU,SAAAjI,GACb6H,EAAS,CACPzI,KnBjBsC,+BmBkBtCC,gBACAW,WAIJ8H,EAAKI,QAAU,SAAAlI,GACb6H,EAAS,CACPzI,KnBxBqC,8BmByBrCC,gBACAW,WAIJ8H,EAAKK,UAAY,SAAAnI,GACf6H,EAAS,CACPzI,KnB9BsC,+BmB+BtCC,gBACAW,UAEF,IAAIoI,SAAQ,SAACC,EAASC,GACpB,IAAK,IAAD,EAC8B,oBAA5B,UAAOtI,EAAM/C,YAAb,aAAO,EAAYsL,MACrBvI,EAAM/C,KACHsL,OACAC,MAAK,SAAAvL,GAAI,OAAIoL,EAAQpL,MACrBwL,OAAM,SAAAxI,GAAG,OAAIqI,EAAOrI,MAEvBoI,EAAQK,KAAKC,MAAM3I,EAAM/C,OAE3B,MAAOgD,GACPqI,EAAOrI,OAGRuI,MAAK,SAAAvL,GACJ4K,EAAS,CACPzI,KnBjD6C,0CmBkD7CC,gBACApC,YAGHwL,OAAM,SAAAxI,GACL4H,EAAS,CACPzI,KnBvD0C,uCmBwD1CC,gBACAY,aAOR2I,CAASvJ,EAATuJ,CAAwBf,KChEbgB,GACN,sDCAMC,GAAQ,SAAAlH,GACnB,IAAMiG,EAAWkB,cAIjB,OAHAlB,ECRO,CACLzI,KxBJoB,WwBKpBC,cDM8B2J,KAChCnB,EAASoB,GAAyCD,KAE3C,kBAAC,GAAD,OEXIE,GAAU,SAAAtH,GAAK,OAC1B,iCACE,6CACA,6BACE,kBAAC,IAAD,CAAMuH,GAAG,IAAIC,SAAS,MACpB,uCCDKC,GAAO,SAAAzH,GAAK,OACvB,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0H,OAAK,EAACC,KAAK,OAAOC,UAAWN,KAEpC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWV,KACjC,kBAAC,IAAD,CAAOS,KAAK,aAAaC,UAAWzC,KAEpC,kBAAC,IAAD,CAAUoC,GAAG,YCNNM,GAAM,SAAA7H,GACjB,OACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,IAAD,CAAQ2I,SAAUC,IAChB,kBAAC,EAAD,KACE,kBAAC,GAAD,UCFUC,QACW,cAA7BvI,OAAOwI,SAASC,UAEe,UAA7BzI,OAAOwI,SAASC,UAEhBzI,OAAOwI,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdhC,OAAM,SAAA3G,GACL4I,QAAQ5I,MAAMA,EAAMnF,c","file":"static/js/main.e5d93452.chunk.js","sourcesContent":["export class MessageBlock {\n  constructor(message) {\n    this.timestamp = Date.now();\n    this.message = message;\n    this.block_number = message.data.number;\n  }\n}\n\nexport class MessageEvent {\n  constructor(message) {\n    this.timestamp = Date.now();\n    this.message = message;\n    this.block_number = message.block_number;\n    this.txhash = message.txhash;\n  }\n}\n\nexport class MessageBounty extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.guid = message.data.guid;\n    this.author = message.data.author;\n    this.amount = message.data.amount / Math.pow(10, 18);\n  }\n}\n\nexport class MessageAssertion extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.bounty_guid = message.data.bounty_guid;\n    this.author = message.data.author;\n    this.bid = message.data.bid / Math.pow(10, 18);\n  }\n}\n\nexport class MessageReveal extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.bounty_guid = message.data.bounty_guid;\n    this.author = message.data.author;\n    this.verdict = message.data.verdicts[0];\n  }\n}\n\nexport class MessageSettled extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.bounty_guid = message.data.bounty_guid;\n    this.payout = message.data.payout / Math.pow(10, 18);\n  }\n}\n","export const BLOCK = \"block\";\nexport const BOUNTY = \"bounty\";\nexport const ASSERTION = \"assertion\";\nexport const REVEAL = \"Reveal\";\nexport const VOTE = \"Vote\";\nexport const QUORUM = \"Quorum\";\nexport const SETTLED = \"settled_bounty\";\nexport const INITIALIZED_CHANNEL = \"Initialized Channel\";\n","import produce from \"immer\";\n\nimport * as entities from \"./entities\";\nimport * as eventTypes from \"./eventTypes\";\n\nimport * as communityActionTypes from \"../community/communityActionTypes\";\n\nconst limit = 20;\n\nlet _producer = (entity, draftState) => {\n  draftState.count += 1;\n  draftState.last = entity;\n  draftState.messages = [entity, ...draftState.messages.slice(0, limit)];\n};\n\nexport const messagesReducer = (state = {}, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case communityActionTypes.COMMUNITY_CONNECT:\n        draft[action.community_url] = Object.keys(eventTypes).reduce(\n          (acc, cur) => {\n            acc[eventTypes[cur]] = {\n              count: 0,\n              last: null,\n              messages: [],\n            };\n            return acc;\n          },\n          {},\n        );\n        return;\n\n      case communityActionTypes.COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED:\n        let entity;\n        let draftState;\n\n        switch (action.data.event) {\n          case eventTypes.BLOCK:\n            entity = new entities.MessageBlock(action.data);\n            draftState = draft[action.community_url][eventTypes.BLOCK];\n            _producer(entity, draftState);\n            return;\n\n          case eventTypes.BOUNTY:\n            entity = new entities.MessageBounty(action.data);\n            draftState = draft[action.community_url][eventTypes.BOUNTY];\n            _producer(entity, draftState);\n            draftState.total_amount =\n              (draftState.total_amount || 0) + entity.amount;\n            return;\n\n          case eventTypes.ASSERTION:\n            entity = new entities.MessageAssertion(action.data);\n            draftState = draft[action.community_url][eventTypes.ASSERTION];\n            _producer(entity, draftState);\n            draftState.total_bid = (draftState.total_bid || 0) + entity.bid;\n            return;\n\n          case eventTypes.REVEAL:\n            entity = new entities.MessageReveal(action.data);\n            draftState = draft[action.community_url][eventTypes.REVEAL];\n            _producer(entity, draftState);\n            return;\n\n          case eventTypes.SETTLED:\n            entity = new entity.MessageSettled(action.data);\n            draftState = draft[action.community_url][eventTypes.SETTLED];\n            _producer(entity, draftState);\n            draftState.total_payout =\n              (draftState.total_payout || 0) + entity.payout;\n            return;\n\n          default:\n            return;\n        }\n\n      default:\n        return;\n    }\n  });\n","import {combineReducers} from \"redux\";\n\nimport * as reducers from \"constants/reducers\";\n\nimport {activeReducer} from \"./active/activeReducer\";\nimport {communityReducer} from \"./community/communityReducer\";\nimport {messagesReducer} from \"./messages/messagesReducer\";\n\nconst _reducer = combineReducers({\n  [reducers.active]: activeReducer,\n  [reducers.community]: communityReducer,\n  [reducers.messages]: messagesReducer,\n});\n\nexport const reducer = (state, action) => {\n  return _reducer(state, action);\n};\n","export const active = \"active\";\nexport const community = \"community\";\nexport const messages = \"messages\";\n","import * as actionTypes from \"./activeActionTypes\";\n\nexport const activeReducer = (state = null, action) => {\n  switch (action.type) {\n    case actionTypes.ACTIVATE:\n      return action.community_url;\n\n    default:\n      return state;\n  }\n};\n","export const ACTIVATE = \"ACTIVATE\";\n","import produce from \"immer\";\n\nimport * as actionTypes from \"./communityActionTypes\";\n\nexport const communityReducer = (state = {}, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case actionTypes.COMMUNITY_CONNECT:\n        draft[action.community_url] = {\n          community_url: action.community_url,\n          is_connected: false,\n          connection: {\n            initiated: Date.now(),\n            succeded: null,\n            closed: null,\n            errors: [],\n          },\n          messages: {\n            last: null,\n            last_error: null,\n          },\n        };\n        return;\n\n      case actionTypes.COMMUNITY_CONNECT__SUCCEEDED:\n        draft[action.community_url].is_connected = true;\n        draft[action.community_url].connection.succeded = Date.now();\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION__CLOSED:\n        draft[action.community_url].is_connected = false;\n        draft[action.community_url].connection.closed = Date.now();\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION__ERROR:\n        draft[action.community_url].connection.errors.push({\n          timestamp: Date.now(),\n          event: action.event,\n        });\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION_MESSAGE:\n        draft[action.community_url].messages.last = {\n          timestamp: Date.now(),\n          event: action.event,\n        };\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED:\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION_MESSAGE__FAILED:\n        draft[action.community_url].messages.last_error = {\n          timestamp: Date.now(),\n          err: action.err,\n        };\n        return;\n\n      default:\n        return;\n    }\n  });\n","export const COMMUNITY_CONNECT = \"COMMUNITY_CONNECT\";\nexport const COMMUNITY_CONNECT__SUCCEEDED = \"COMMUNITY_CONNECT__SUCCEEDED\";\n\nexport const COMMUNITY_CONNECTION__CLOSED = \"COMMUNITY_CONNECTION__CLOSED\";\nexport const COMMUNITY_CONNECTION__ERROR = \"COMMUNITY_CONNECTION__ERROR\";\n\nexport const COMMUNITY_CONNECTION_MESSAGE = \"COMMUNITY_CONNECTION_MESSAGE\";\nexport const COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED = \"COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED\";\nexport const COMMUNITY_CONNECTION_MESSAGE__FAILED = \"COMMUNITY_CONNECTION_MESSAGE__FAILED\";\n","import {applyMiddleware, compose, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport {reducer} from \"./reducer\";\n\nconst configureStore = () => {\n  const middlewareEnhancer = applyMiddleware(thunk);\n\n  const composedEnhancers = compose(\n    middlewareEnhancer,\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : f => f,\n  );\n\n  const store = createStore(reducer, undefined, composedEnhancers);\n  return store;\n};\n\nexport const store = configureStore();\n","import React from \"react\";\nimport P from \"prop-types\";\n\nexport class ErrorBoundary extends React.Component {\n  static propTypes = {\n    children: P.node\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {hasError: true, error};\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong. Please reload the page</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from \"react\";\nimport P from \"prop-types\";\n\nexport const PolyswarmLogo = props => (\n  <svg id=\"polyswarm-logo\" viewBox=\"0 0 34 32\">\n    <path\n      fill={props.fill}\n      d=\"M3.624 8.457h16.707c2.5 0 4.534 2.018 4.534 4.497s-2.034 4.497-4.534 4.497h-9.040c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h9.039c3.924 0 7.116-3.166 7.116-7.058s-3.192-7.058-7.116-7.058h-16.706c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28z\"\n    />\n    <path\n      fill={props.fill}\n      d=\"M20.331 0h-6.479c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h6.479c5.778 0 10.479 4.662 10.479 10.394s-4.701 10.393-10.479 10.393h-16.46c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h16.459c7.202 0 13.060-5.811 13.060-12.954s-5.858-12.954-13.060-12.954z\"\n    />\n    <path\n      fill={props.fill}\n      d=\"M12.846 12.954c0-0.706-0.579-1.28-1.291-1.28h-3.146c-0.712 0-1.291 0.574-1.291 1.28 0 0.709 0.571 1.28 1.043 1.28h3.146c0.906 0 1.539-0.527 1.539-1.28z\"\n    />\n    <path\n      fill={props.fill}\n      d=\"M8.76 29.243h-7.469c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h7.469c0.712 0 1.291-0.574 1.291-1.28s-0.579-1.28-1.291-1.28z\"\n    />\n  </svg>\n);\n\nPolyswarmLogo.propTypes = {\n  fill: P.string,\n};\n","import React from \"react\";\nimport P from \"prop-types\";\n\nimport * as colors from \"constants/colors\";\n\nexport const Svg = props => {\n  return (\n    <svg\n      viewBox={`0 0 ${props.W} ${props.H}`}\n      preserveAspectRatio=\"none\"\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      {props.children}\n    </svg>\n  );\n};\n\nSvg.propTypes = {\n  W: P.number.isRequired,\n  H: P.number.isRequired,\n  children: P.array.isRequired,\n};\n\nexport const SvgBar = props => {\n  let _posX = props.W - props.w - (props.w + props.gapW) * (props.noOfDataPoints - props.currentDataPointIndex - 1);\n  return <path d={`M ${_posX} ${props.H} v -${props.h} h ${props.w} v ${props.h} Z`} fill={props.fill} />;\n};\n\nSvgBar.propTypes = {\n  fill: P.string.isRequired,\n  currentDataPointIndex: P.number.isRequired,\n  noOfDataPoints: P.number.isRequired,\n  gapW: P.number.isRequired,\n  W: P.number.isRequired,\n  H: P.number.isRequired,\n  w: P.number.isRequired,\n  h: P.number.isRequired,\n};\n\nexport const SvgBarChart = props => {\n  let _W = props.maxNoOfDataPoints * (props.w + props.gapW) - props.gapW;\n  return (\n    <Svg W={_W} H={props.H}>\n      {props.data.map((data, i) => (\n        <SvgBar\n          key={i}\n          fill={props.barFill}\n          currentDataPointIndex={i}\n          noOfDataPoints={props.data.length}\n          gapW={props.gapW}\n          W={_W}\n          H={props.H}\n          w={props.w}\n          h={data.h}\n        />\n      ))}\n      <path\n        d={`M 0 ${props.H} m 0 -${props.avg} l ${_W} 0`}\n        stroke={props.avgLineStrokeColor}\n        strokeWidth={props.avgLineStrokeWidth}\n      />\n    </Svg>\n  );\n};\n\nSvgBarChart.propTypes = {\n  data: P.array.isRequired,\n  maxNoOfDataPoints: P.number.isRequired,\n  avgLineStrokeColor: P.string,\n  avgLineStrokeWidth: P.number,\n  barFill: P.string,\n  gapW: P.number,\n  H: P.number.isRequired,\n  w: P.number,\n};\n\nSvgBarChart.defaultProps = {\n  avgLineStrokeColor: colors.green,\n  barFill: colors.purple,\n  gapW: 1,\n  w: 10,\n};\n","export const green = \"#7bfa7f\";\nexport const purple = \"#6d3aec\";\nexport const red = \"#f00\";\nexport const white = \"#ffffff\";\n","import React from \"react\";\n\nexport const Nectar = props => {\n  let amount = props.amount.toFixed(8);\n  let [integer, decimal] = amount.split(\".\");\n\n  return (\n    <span>\n      <span>{integer}</span>\n      <span style={{opacity: 0.64}}>\n        <span>.</span>\n        <span>{decimal}</span>\n      </span>\n      <span>NCT</span>\n    </span>\n  );\n};\n","export const getAverage = (data, field) => {\n  const total = data.reduce(\n    (accumulator, currentValue) => accumulator + currentValue[field],\n    0,\n  );\n  const avg = total / data.length || 0;\n  return avg;\n};\n","import {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport * as reducers from \"constants/reducers\";\n\nexport function useMessageGroupBy(\n  community,\n  eventType,\n  dataLengthLimit,\n  groupByField,\n  nctField,\n) {\n  const message = useSelector(\n    state => state[reducers.messages][community][eventType].last,\n  );\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (message) {\n      setData(data => {\n        let index = data.findIndex(\n          o => o[groupByField] === message[groupByField],\n        );\n        if (index === -1) {\n          if (data.length === dataLengthLimit) {\n            data.shift();\n          }\n          return [\n            ...data,\n            {[groupByField]: message[groupByField], h: message[nctField]},\n          ];\n        } else {\n          data[index].h += message[nctField];\n          return [...data];\n        }\n      });\n    }\n  }, [message, community, eventType, dataLengthLimit, groupByField, nctField]);\n\n  return data;\n}\n","import React from \"react\";\n\nimport {SvgBarChart} from \"components/charting/SvgBarChart\";\nimport {Nectar} from \"components/Nectar\";\nimport {getAverage} from \"functions/getAverage\";\nimport {useMessageGroupBy} from \"hooks/useMessageGroupBy\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst max_no_of_data_points = 50;\n\nexport const AssertionBidByBlock = props => {\n  const data = useMessageGroupBy(props.community, eventTypes.ASSERTION, max_no_of_data_points, \"block_number\", \"bid\");\n\n  const H = data.length ? Math.max(...data.map(d => d.h)) : 0;\n  const avg = getAverage(data, \"h\");\n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n      <div>\n        <div style={{margin: \"0 0 0.618em\"}}>over the latest {max_no_of_data_points} blocks</div>\n        <div style={{height: \"10em\", width: \"500px\"}}>\n          <SvgBarChart\n            data={data}\n            maxNoOfDataPoints={max_no_of_data_points}\n            H={H}\n            avg={avg}\n            avgLineStrokeWidth={(H * 2) / 120}\n          />\n        </div>\n      </div>\n      <div style={{minWidth: \"1em\"}} />\n      <div style={{alignSelf: \"flex-end\"}}>\n        <div>\n          <div style={{fontWeight: 500}}>max</div>\n          <Nectar amount={H} />\n        </div>\n        <div style={{height: \"0.382em\"}} />\n        <div>\n          <div style={{fontWeight: 500, whiteSpace: \"nowrap\"}}>average per block</div>\n          <Nectar amount={avg} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport {SvgBarChart} from \"components/charting/SvgBarChart\";\nimport {Nectar} from \"components/Nectar\";\nimport {getAverage} from \"functions/getAverage\";\nimport {useMessageGroupBy} from \"hooks/useMessageGroupBy\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst max_no_of_data_points = 250;\n\nexport const AssertionBidByBounty = props => {\n  const data = useMessageGroupBy(props.community, eventTypes.ASSERTION, max_no_of_data_points, \"bounty_guid\", \"bid\");\n\n  const H = data.length ? Math.max(...data.map(d => d.h)) : 0;\n  const avg = getAverage(data, \"h\");\n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n      <div>\n        <div style={{margin: \"0 0 0.618em\"}}>over the latest {max_no_of_data_points} bounties</div>\n        <div style={{height: \"10em\", width: \"500px\"}}>\n          <SvgBarChart\n            data={data}\n            maxNoOfDataPoints={max_no_of_data_points}\n            H={H}\n            avg={avg}\n            avgLineStrokeWidth={(H * 2) / 120}\n          />\n        </div>\n      </div>\n      <div style={{minWidth: \"1em\"}} />\n      <div style={{alignSelf: \"flex-end\"}}>\n        <div>\n          <div style={{fontWeight: 500}}>max</div>\n          <Nectar amount={H} />\n        </div>\n        <div style={{height: \"0.382em\"}} />\n        <div>\n          <div style={{fontWeight: 500, whiteSpace: \"nowrap\"}}>average per bounty</div>\n          <Nectar amount={avg} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as reducers from \"constants/reducers\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nexport const AssertionBidTotal = props => {\n  const total_bid = useSelector(state => state[reducers.messages][props.community][eventTypes.ASSERTION].total_bid);\n\n  return (\n    <div style={{textAlign: \"right\"}}>\n      <div style={{fontWeight: 500}}>total rolling amount</div>\n      <Nectar amount={total_bid || 0} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport * as reducers from \"constants/reducers\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nexport const AssertionCount = props => {\n  const count = useSelector(state => state[reducers.messages][props.community][eventTypes.ASSERTION].count);\n\n  return (\n    <div>\n      <div style={{fontWeight: 500}}>rolling count</div>\n      <div>{count}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as reducers from \"constants/reducers\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nexport const AssertionTable = props => {\n  const messages = useSelector(state => state[reducers.messages][props.community][eventTypes.ASSERTION].messages);\n\n  return (\n    <table style={{minWidth: `${443 / 12}em`}}>\n      <thead>\n        <tr>\n          <th style={{textAlign: \"left\", minWidth: `${75 / 12}em`}}>block</th>\n          <th style={{textAlign: \"left\", minWidth: `${264 / 12}em`}}>bounty guid</th>\n          <th style={{textAlign: \"right\"}}>bid</th>\n        </tr>\n      </thead>\n      <tbody>\n        {messages.map(message => (\n          <tr key={`${Date.now()}-${message.author}-${message.bounty_guid}`}>\n            <td style={{whiteSpace: \"nowrap\"}}>{message.block_number}</td>\n            <td style={{whiteSpace: \"nowrap\"}}>{message.bounty_guid}</td>\n            <td style={{whiteSpace: \"nowrap\"}}>\n              <Nectar amount={message.bid} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from \"react\";\n\nimport {SvgBarChart} from \"components/charting/SvgBarChart\";\nimport {Nectar} from \"components/Nectar\";\nimport {getAverage} from \"functions/getAverage\";\nimport {useMessageGroupBy} from \"hooks/useMessageGroupBy\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst max_no_of_data_points = 50;\n\nexport const BountyAmountByBlock = props => {\n  const data = useMessageGroupBy(props.community, eventTypes.BOUNTY, max_no_of_data_points, \"block_number\", \"amount\");\n\n  const H = data.length ? Math.max(...data.map(d => d.h)) : 0;\n  const avg = getAverage(data, \"h\");\n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n      <div>\n        <div style={{margin: \"0 0 0.618em\"}}>over the latest {max_no_of_data_points} blocks</div>\n        <div style={{height: \"10em\", width: \"500px\"}}>\n          <SvgBarChart\n            data={data}\n            maxNoOfDataPoints={max_no_of_data_points}\n            H={H}\n            avg={avg}\n            avgLineStrokeWidth={(H * 2) / 120}\n          />\n        </div>\n      </div>\n      <div style={{minWidth: \"1em\"}} />\n      <div style={{alignSelf: \"flex-end\"}}>\n        <div>\n          <div style={{fontWeight: 500}}>max</div>\n          <Nectar amount={H} />\n        </div>\n        <div style={{height: \"0.382em\"}} />\n        <div>\n          <div style={{fontWeight: 500, whiteSpace: \"nowrap\"}}>average per block</div>\n          <Nectar amount={avg} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as reducers from \"constants/reducers\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nexport const BountyAmountTotal = props => {\n  const total_amount = useSelector(state => state[reducers.messages][props.community][eventTypes.BOUNTY].total_amount);\n\n  return (\n    <div style={{textAlign: \"right\"}}>\n      <div style={{fontWeight: 500}}>total rolling amount</div>\n      <Nectar amount={total_amount || 0} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport * as reducers from \"constants/reducers\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nexport const BountyCount = props => {\n  const count = useSelector(state => state[reducers.messages][props.community][eventTypes.BOUNTY].count);\n\n  return (\n    <div>\n      <div style={{fontWeight: 500}}>rolling count</div>\n      <div>{count}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as reducers from \"constants/reducers\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nexport const BountyTable = props => {\n  const messages = useSelector(state => state[reducers.messages][props.community][eventTypes.BOUNTY].messages);\n\n  return (\n    <table style={{minWidth: `${443 / 12}em`}}>\n      <thead>\n        <tr>\n          <th style={{textAlign: \"left\", minWidth: `${75 / 12}em`}}>block</th>\n          <th style={{textAlign: \"left\", minWidth: `${264 / 12}em`}}>guid</th>\n          <th style={{textAlign: \"right\"}}>bounty</th>\n        </tr>\n      </thead>\n      <tbody>\n        {messages.map(message => (\n          <tr key={`${Date.now()}-${message.guid}`}>\n            <td style={{whiteSpace: \"nowrap\"}}>{message.block_number}</td>\n            <td style={{whiteSpace: \"nowrap\"}}>{message.guid}</td>\n            <td style={{whiteSpace: \"nowrap\"}}>\n              <Nectar amount={message.amount} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {PolyswarmLogo} from \"components/PolyswarmLogo\";\nimport * as colors from \"constants/colors\";\nimport * as reducers from \"constants/reducers\";\n\nimport {AssertionBidByBlock} from \"./assertion/AssertionBidByBlock\";\nimport {AssertionBidByBounty} from \"./assertion/AssertionBidByBounty\";\nimport {AssertionBidTotal} from \"./assertion/AssertionBidTotal\";\nimport {AssertionCount} from \"./assertion/AssertionCount\";\nimport {AssertionTable} from \"./assertion/AssertionTable\";\n\nimport {BountyAmountByBlock} from \"./bounty/BountyAmountByBlock\";\nimport {BountyAmountTotal} from \"./bounty/BountyAmountTotal\";\nimport {BountyCount} from \"./bounty/BountyCount\";\nimport {BountyTable} from \"./bounty/BountyTable\";\n\nconst HorizontalDivider = props => <div style={{minWidth: \"1.618em\"}} />;\nconst VerticalDivider = props => <div style={{height: \"1em\"}} />;\n\nexport const Dashboard = props => {\n  const community = useSelector(state => state[reducers.active]);\n  const isConnected = useSelector(state => state[reducers.community][community].is_connected);\n\n  return (\n    <section>\n      <header style={{display: \"flex\", flexDirection: \"row\", alignItems: \"center\", padding: \"0.618em 1.618em 3em\"}}>\n        <div\n          style={{\n            background: colors.purple,\n            display: \"inline-block\",\n            padding: \"1em\",\n            borderRadius: \"50%\",\n          }}\n        >\n          <div style={{height: 32 * 0.8, width: 34 * 0.8}}>\n            <PolyswarmLogo fill={colors.white} />\n          </div>\n        </div>\n        <HorizontalDivider />\n        <div\n          style={{\n            backgroundColor: colors.purple,\n            color: colors.white,\n            fontWeight: 500,\n            border: `1px solid ${colors.purple}`,\n            borderRadius: \"2em\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            padding: \"0.382em 1.618em\",\n          }}\n        >\n          <span\n            style={{\n              backgroundColor: isConnected ? colors.green : colors.red,\n              borderRadius: \"50%\",\n              display: \"inline-block\",\n              width: \"1em\",\n              height: \"1em\",\n              animation: isConnected && \"beacon 1.2s infinite ease-in-out\",\n            }}\n          />\n          <div style={{minWidth: \"0.618em\"}} />\n          <span style={{whiteSpace: \"nowrap\"}}>{community}</span>\n        </div>\n      </header>\n\n      <div style={{display: \"flex\", flexDirection: \"row\", flexWrap: \"nowrap\"}}>\n        <HorizontalDivider />\n        <div>\n          <div>\n            <h3 style={{margin: \"0\", padding: \"0\", textTransform: \"uppercase\"}}>bounties by block</h3>\n            <BountyAmountByBlock community={community} />\n          </div>\n          <VerticalDivider />\n          <div>\n            <h3 style={{margin: \"0\", padding: \"0\", textTransform: \"uppercase\"}}>assertions by block</h3>\n            <AssertionBidByBlock community={community} />\n          </div>\n          <VerticalDivider />\n          <div>\n            <h3 style={{margin: \"0\", padding: \"0\", textTransform: \"uppercase\"}}>assertions by bounty</h3>\n            <AssertionBidByBounty community={community} />\n          </div>\n        </div>\n        <HorizontalDivider />\n        <HorizontalDivider />\n        <div>\n          <h3 style={{margin: \"0\", padding: \"0\", textTransform: \"uppercase\"}}>bounties</h3>\n          <VerticalDivider />\n          <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n            <BountyCount community={community} />\n            <BountyAmountTotal community={community} />\n          </div>\n          <VerticalDivider />\n          <BountyTable community={community} />\n        </div>\n        <HorizontalDivider />\n        <div>\n          <h3 style={{margin: \"0\", padding: \"0\", textTransform: \"uppercase\"}}>assertions</h3>\n          <VerticalDivider />\n          <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n            <AssertionCount community={community} />\n            <AssertionBidTotal community={community} />\n          </div>\n          <VerticalDivider />\n          <AssertionTable community={community} />\n        </div>\n        <HorizontalDivider />\n      </div>\n    </section>\n  );\n};\n","import * as actionTypes from \"./communityActionTypes\";\n\nconst _connect = community_url => dispatch => {\n  dispatch({\n    type: actionTypes.COMMUNITY_CONNECT,\n    community_url,\n  });\n\n  const conn = new WebSocket(community_url);\n\n  conn.onopen = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECT__SUCCEEDED,\n      community_url,\n      event,\n    });\n  };\n\n  conn.onclose = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECTION__CLOSED,\n      community_url,\n      event,\n    });\n  };\n\n  conn.onerror = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECTION__ERROR,\n      community_url,\n      event,\n    });\n  };\n\n  conn.onmessage = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECTION_MESSAGE,\n      community_url,\n      event,\n    });\n    new Promise((resolve, reject) => {\n      try {\n        if (typeof event.data?.text === \"function\") {\n          event.data\n            .text()\n            .then(data => resolve(data))\n            .catch(err => reject(err));\n        } else {\n          resolve(JSON.parse(event.data));\n        }\n      } catch (err) {\n        reject(err);\n      }\n    })\n      .then(data => {\n        dispatch({\n          type: actionTypes.COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED,\n          community_url,\n          data,\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: actionTypes.COMMUNITY_CONNECTION_MESSAGE__FAILED,\n          community_url,\n          err,\n        });\n      });\n  };\n};\n\nexport const registerCommunityAction = community_url => dispatch => {\n  _connect(community_url)(dispatch);\n};\n","export const lima = {\n  uri: \"wss://lima.polyswarm.network/events/?chain=side\",\n};\n\nexport const nu = {\n  uri: \"wss://nu.k.polyswarm.network/v1/events/?chain=side\",\n};\n\nexport const rho = {\n  uri: \"wss://rho.k.polyswarm.network/v1/events/?chain=side\",\n};\n","import React from \"react\";\nimport {useDispatch} from \"react-redux\";\n\nimport * as activeActions from \"store/active/activeActions\";\nimport * as communityActions from \"store/community/communityActions\";\nimport * as communities from \"constants/communities\";\n\nimport {Dashboard} from \"../dashboard/Dashboard\";\n\nexport const Front = props => {\n  const dispatch = useDispatch();\n  dispatch(activeActions.activate(communities.rho.uri));\n  dispatch(communityActions.registerCommunityAction(communities.rho.uri));\n\n  return <Dashboard />;\n};\n","import * as actionTypes from \"./activeActionTypes\";\n\nexport const activate = community_url => {\n  return {\n    type: actionTypes.ACTIVATE,\n    community_url,\n  };\n};\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport const NoMatch = props => (\n  <section>\n    <h2>404 Not Found</h2>\n    <div>\n      <Link to=\"/\" tabIndex=\"-1\">\n        <span>/</span>\n      </Link>\n    </div>\n  </section>\n);\n","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\n\nimport {Dashboard} from \"../dashboard/Dashboard\";\nimport {Front} from \"../front/Front\";\nimport {NoMatch} from \"../nomatch/NoMatch\";\n\nexport const Main = props => (\n  <main>\n    <Switch>\n      <Route exact path=\"/404\" component={NoMatch} />\n\n      <Route exact path=\"/\" component={Front} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n\n      <Redirect to=\"/404\" />\n    </Switch>\n  </main>\n);\n","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport {store} from \"../store/store\";\nimport {ErrorBoundary} from \"../components/error/ErrorBoundary\";\n\nimport {Main} from \"./main/Main\";\n\nexport const App = props => {\n  return (\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <ErrorBoundary>\n          <Main />\n        </ErrorBoundary>\n      </Router>\n    </Provider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.scss\";\nimport {App} from \"./views/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
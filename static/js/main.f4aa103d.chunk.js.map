{"version":3,"sources":["store/messages/entities.js","store/messages/eventTypes.js","store/messages/messagesReducer.js","store/reducer.js","store/community/communityReducer.js","store/community/communityActionTypes.js","store/store.js","components/error/ErrorBoundary.jsx","components/charting/SvgBarChart.jsx","components/Nectar.jsx","views/dashboard/assertion/AssertionBidByBlock.jsx","views/dashboard/assertion/AssertionBidTotal.jsx","views/dashboard/assertion/AssertionCount.jsx","views/dashboard/assertion/AssertionTable.jsx","views/dashboard/bounty/BountyAmountByBlock.jsx","views/dashboard/bounty/BountyAmountTotal.jsx","views/dashboard/bounty/BountyCount.jsx","views/dashboard/bounty/BountyTable.jsx","views/dashboard/Dashboard.jsx","constants/colors.js","store/community/communityActions.js","views/front/Front.jsx","views/nomatch/NoMatch.jsx","views/main/Main.jsx","views/App.jsx","serviceWorker.js","index.js"],"names":["MessageBlock","message","this","timestamp","Date","now","block_number","data","number","MessageEvent","txhash","MessageBounty","guid","author","amount","Math","pow","MessageAssertion","bounty_guid","bid","MessageReveal","verdict","verdicts","BLOCK","BOUNTY","ASSERTION","REVEAL","VOTE","QUORUM","SETTLED","INITIALIZED_CHANNEL","_producer","entity","draftState","count","last","messages","slice","_reducer","combineReducers","community","state","action","produce","draft","type","community_url","community_name","connection","initiated","succeded","closed","errors","last_error","push","event","err","Object","keys","eventTypes","reduce","acc","cur","entities","total_amount","total_bid","MessageSettled","total_payout","payout","reducer","store","middlewareEnhancer","applyMiddleware","thunk","composedEnhancers","compose","window","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","undefined","configureStore","ErrorBoundary","props","hasError","error","children","React","Component","Svg","viewBox","W","H","preserveAspectRatio","style","width","height","SvgBar","_posX","w","gapW","noOfDataPoints","currentDataPointIndex","d","h","fill","SvgBarChart","_W","maxNoOfDataPoints","map","i","key","barFill","length","avg","stroke","avgLineStrokeColor","strokeWidth","avgLineStrokeWidth","defaultProps","Nectar","toFixed","split","integer","decimal","opacity","AssertionBidByBlock","useSelector","useState","setData","useEffect","index","findIndex","block","name","shift","max","total","accumulator","currentValue","marginBottom","AssertionBidTotal","AssertionCount","AssertionTable","textAlign","BountyAmountByBlock","BountyAmountTotal","BountyCount","BountyTable","Dashboard","connClosed","display","flexDirection","alignItems","padding","background","borderRadius","id","border","position","left","zIndex","backgroundColor","verticalAlign","margin","animation","registerCommunityAction","dispatch","conn","WebSocket","onopen","onclose","onerror","onmessage","Promise","resolve","reject","text","then","catch","JSON","parse","_connect","Front","useDispatch","actions","NoMatch","to","tabIndex","Main","exact","path","component","App","basename","process","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"6mBAAaA,EACX,WAAYC,GAAU,oBACpBC,KAAKC,UAAYC,KAAKC,MACtBH,KAAKD,QAAUA,EACfC,KAAKI,aAAeL,EAAQM,KAAKC,QAIxBC,EACX,WAAYR,GAAU,oBACpBC,KAAKC,UAAYC,KAAKC,MACtBH,KAAKD,QAAUA,EACfC,KAAKI,aAAeL,EAAQK,aAC5BJ,KAAKQ,OAAST,EAAQS,QAIbC,EAAb,kDACE,WAAYV,GAAU,IAAD,8BACnB,cAAMA,IAEDW,KAAOX,EAAQM,KAAKK,KACzB,EAAKC,OAASZ,EAAQM,KAAKM,OAC3B,EAAKC,OAASb,EAAQM,KAAKO,OAASC,KAAKC,IAAI,GAAI,IAL9B,EADvB,UAAmCP,GAUtBQ,EAAb,kDACE,WAAYhB,GAAU,IAAD,8BACnB,cAAMA,IAEDiB,YAAcjB,EAAQM,KAAKW,YAChC,EAAKL,OAASZ,EAAQM,KAAKM,OAC3B,EAAKM,IAAMlB,EAAQM,KAAKY,IAAMJ,KAAKC,IAAI,GAAI,IALxB,EADvB,UAAsCP,GAUzBW,EAAb,kDACE,WAAYnB,GAAU,IAAD,8BACnB,cAAMA,IAEDiB,YAAcjB,EAAQM,KAAKW,YAChC,EAAKL,OAASZ,EAAQM,KAAKM,OAC3B,EAAKQ,QAAUpB,EAAQM,KAAKe,SAAS,GALlB,EADvB,UAAmCb,GCrCtBc,EAAQ,QACRC,EAAS,SACTC,EAAY,YACZC,EAAS,SACTC,EAAO,OACPC,EAAS,SACTC,EAAU,iBACVC,EAAsB,sBCE/BC,EAAY,SAACC,EAAQC,GACvBA,EAAWC,OAAS,EACpBD,EAAWE,KAAOH,EAClBC,EAAWG,SAAX,CAAuBJ,GAAvB,mBAAkCC,EAAWG,SAASC,MAAM,EALhD,OCFRC,EAAWC,YAAgB,CAC/BC,UCF8B,eAACC,EAAD,uDAAS,GAAIC,EAAb,8CAC9BC,YAAQF,GAAO,SAAAG,GACb,OAAQF,EAAOG,MACb,ICP2B,oBDsBzB,YAdAD,EAAMF,EAAOI,eAAiB,CAC5BC,eAAgBL,EAAOK,eACvBD,cAAeJ,EAAOI,cACtBE,WAAY,CACVC,UAAW7C,KAAKC,MAChB6C,SAAU,KACVC,OAAQ,KACRC,OAAQ,IAEVhB,SAAU,CACRD,KAAM,KACNkB,WAAY,QAKlB,ICvBsC,+BDyBpC,YADAT,EAAMF,EAAOI,eAAeE,WAAWE,SAAW9C,KAAKC,OAGzD,ICzBsC,+BD2BpC,YADAuC,EAAMF,EAAOI,eAAeE,WAAWG,OAAS/C,KAAKC,OAGvD,IC5BqC,8BDiCnC,YAJAuC,EAAMF,EAAOI,eAAeE,WAAWI,OAAOE,KAAK,CACjDnD,UAAWC,KAAKC,MAChBkD,MAAOb,EAAOa,QAIlB,ICjCsC,+BDsCpC,YAJAX,EAAMF,EAAOI,eAAeV,SAASD,KAAO,CAC1ChC,UAAWC,KAAKC,MAChBkD,MAAOb,EAAOa,QAIlB,ICvCiD,0CDwC/C,OAEF,ICzC8C,uCD8C5C,YAJAX,EAAMF,EAAOI,eAAeV,SAASiB,WAAa,CAChDlD,UAAWC,KAAKC,MAChBmD,IAAKd,EAAOc,MAIhB,QACE,YDlDNpB,SDQ6B,eAACK,EAAD,uDAAS,GAAIC,EAAb,8CAC7BC,YAAQF,GAAO,SAAAG,GACb,OAAQF,EAAOG,MACb,IGlB2B,oBH8BzB,YAXAD,EAAMF,EAAOI,eAAiBW,OAAOC,KAAKC,GAAYC,QACpD,SAACC,EAAKC,GAMJ,OALAD,EAAIF,EAAWG,IAAQ,CACrB5B,MAAO,EACPC,KAAM,KACNC,SAAU,IAELyB,IAET,KAIJ,IGzBiD,0CH0B/C,IAAI7B,EACAC,EAEJ,OAAQS,EAAOnC,KAAKgD,OAClB,KAAKI,EAIH,OAHA3B,EAAS,IAAI+B,EAAsBrB,EAAOnC,MAC1C0B,EAAaW,EAAMF,EAAOI,eAAea,QACzC5B,EAAUC,EAAQC,GAGpB,KAAK0B,EAKH,OAJA3B,EAAS,IAAI+B,EAAuBrB,EAAOnC,MAC3C0B,EAAaW,EAAMF,EAAOI,eAAea,GACzC5B,EAAUC,EAAQC,QAClBA,EAAW+B,cAAgB/B,EAAW+B,cAAgB,GAAKhC,EAAOlB,QAGpE,KAAK6C,EAKH,OAJA3B,EAAS,IAAI+B,EAA0BrB,EAAOnC,MAC9C0B,EAAaW,EAAMF,EAAOI,eAAea,GACzC5B,EAAUC,EAAQC,QAClBA,EAAWgC,WAAahC,EAAWgC,WAAa,GAAKjC,EAAOb,KAG9D,KAAKwC,EAIH,OAHA3B,EAAS,IAAI+B,EAAuBrB,EAAOnC,MAC3C0B,EAAaW,EAAMF,EAAOI,eAAea,QACzC5B,EAAUC,EAAQC,GAGpB,KAAK0B,EAKH,OAJA3B,EAAS,IAAIA,EAAOkC,eAAexB,EAAOnC,MAC1C0B,EAAaW,EAAMF,EAAOI,eAAea,GACzC5B,EAAUC,EAAQC,QAClBA,EAAWkC,cAAgBlC,EAAWkC,cAAgB,GAAKnC,EAAOoC,QAGpE,QACE,OAGN,QACE,cCjEKC,EAAU,SAAC5B,EAAOC,GAC7B,OAAOJ,EAASG,EAAOC,IGQZ4B,EAdU,WACrB,IAAMC,EAAqBC,YAAgBC,KAErCC,EAAoBC,YACxBJ,EACAK,OAAOC,6BACHD,OAAOC,+BACP,SAAAC,GAAC,OAAIA,IAIX,OADcC,YAAYV,OAASW,EAAWN,GAI3BO,G,QChBRC,EAAb,kDAKE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACD1C,MAAQ,CACX2C,UAAU,EACVC,MAAO,MAJQ,EALrB,qDAkBI,OAAInF,KAAKuC,MAAM2C,SACN,4EAGFlF,KAAKiF,MAAMG,YAtBtB,gDAakCD,GAC9B,MAAO,CAACD,UAAU,EAAMC,aAd5B,GAAmCE,IAAMC,W,eCA5BC,EAAM,SAAAN,GACjB,OACE,yBACEO,QAAO,cAASP,EAAMQ,EAAf,YAAoBR,EAAMS,GACjCC,oBAAoB,OACpBC,MAAO,CACLC,MAAO,OACPC,OAAQ,SAGTb,EAAMG,WAWAW,EAAS,SAAAd,GACpB,IAAIe,EAAQf,EAAMQ,EAAIR,EAAMgB,GAAKhB,EAAMgB,EAAIhB,EAAMiB,OAASjB,EAAMkB,eAAiBlB,EAAMmB,sBAAwB,GAC/G,OAAO,0BAAMC,EAAC,YAAOL,EAAP,YAAgBf,EAAMS,EAAtB,eAA8BT,EAAMqB,EAApC,cAA2CrB,EAAMgB,EAAjD,cAAwDhB,EAAMqB,EAA9D,MAAqEC,KAAMtB,EAAMsB,QAcpFC,EAAc,SAAAvB,GACzB,IAAIwB,EAAKxB,EAAMyB,mBAAqBzB,EAAMgB,EAAIhB,EAAMiB,MAAQjB,EAAMiB,KAClE,OACE,kBAAC,EAAD,CAAKT,EAAGgB,EAAIf,EAAGT,EAAMS,GAClBT,EAAM5E,KAAKsG,KAAI,SAACtG,EAAMuG,GAAP,OACd,kBAAC,EAAD,CACEC,IAAKD,EACLL,KAAMtB,EAAM6B,QACZV,sBAAuBQ,EACvBT,eAAgBlB,EAAM5E,KAAK0G,OAC3Bb,KAAMjB,EAAMiB,KACZT,EAAGgB,EACHf,EAAGT,EAAMS,EACTO,EAAGhB,EAAMgB,EACTK,EAAGjG,EAAKiG,OAGZ,0BACED,EAAC,cAASpB,EAAMS,EAAf,iBAAyBT,EAAM+B,IAA/B,cAAwCP,EAAxC,MACDQ,OAAQhC,EAAMiC,mBACdC,YAAalC,EAAMmC,uBAiB3BZ,EAAYa,aAAe,CACzBH,mBAAoB,UACpBJ,QAAS,UACTZ,KAAM,EACND,EAAG,IC/EE,IAAMqB,EAAS,SAAArC,GACpB,IAD6B,EAChBA,EAAMrE,OAAO2G,QAAQ,GACFC,MAAM,KAFT,mBAExBC,EAFwB,KAEfC,EAFe,KAI7B,OACE,8BACE,8BAAOD,GACP,0BAAM7B,MAAO,CAAC+B,QAAS,MACrB,mCACA,8BAAOD,IAET,uCCHOE,EAAsB,SAAA3C,GACjC,IAAMlF,EAAU8H,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAJxB,sDAI+CuB,GAAsBxB,QAD9C,EAElB6F,mBAAS,IAFS,mBAEnCzH,EAFmC,KAE7B0H,EAF6B,KAI1CC,qBAAU,WACJjI,GACFgI,GAAQ,SAAA1H,GACN,IAAI4H,EAAQ5H,EAAK6H,WAAU,SAAAC,GAAK,OAAIA,EAAMC,OAASrI,EAAQK,gBAC3D,OAAe,IAAX6H,GAVkB,KAWhB5H,EAAK0G,QACP1G,EAAKgI,QAED,GAAN,mBAAWhI,GAAX,CAAiB,CAAC+H,KAAMrI,EAAQK,aAAckG,EAAGvG,EAAQkB,SAEzDZ,EAAK4H,GAAO3B,GAAKvG,EAAQkB,IAClB,YAAIZ,SAIhB,CAACN,IAEJ,IAAI2F,EAAIrF,EAAK0G,OAASlG,KAAKyH,IAAL,MAAAzH,KAAI,YAAQR,EAAKsG,KAAI,SAAAN,GAAC,OAAIA,EAAEC,OAAM,EACpDiC,EAAQlI,EAAKqD,QAAO,SAAC8E,EAAaC,GAAd,OAA+BD,EAAcC,EAAanC,IAAG,GACjFU,EAAgB,IAAVuB,EAAc,EAAIA,EAAQlI,EAAK0G,OAEzC,OACE,yBAAKnB,MAAO,CAACE,OAAQ,OAAQ4C,aAAc,YACzC,kBAAC,EAAD,CACErI,KAAMA,EACNqG,kBA/BsB,GAgCtBhB,EAAGA,EACHsB,IAAKA,EACLI,mBAAyB,EAAJ1B,EAAS,MAEhC,kDACoB,kBAAC,EAAD,CAAQ9E,OAAQoG,OCrC7B2B,EAAoB,SAAA1D,GAC/B,IAAMlB,EAAY8D,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAH1B,sDAGiDuB,GAAsBM,aAE1F,OACE,6BACE,0CACA,6BACE,kBAAC,EAAD,CAAQnD,OAAQmD,GAAa,OCRxB6E,EAAiB,SAAA3D,GAC5B,IAAMjD,EAAQ6F,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAHtB,sDAG6CuB,GAAsBzB,SAEtF,OACE,6BACE,sCACA,6BAAMA,KCLC6G,EAAiB,SAAA5D,GAC5B,IAAM/C,EAAW2F,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAHzB,sDAGgDuB,GAAsBvB,YAEzF,OACE,+BACE,+BACE,4BACE,wBAAI0D,MAAO,CAACkD,UAAW,SAAvB,SACA,wBAAIlD,MAAO,CAACkD,UAAW,SAAvB,eACA,wBAAIlD,MAAO,CAACkD,UAAW,UAAvB,SAGJ,+BACG5G,EAASyE,KAAI,SAAA5G,GAAO,OACnB,wBAAI8G,IAAG,UAAK3G,KAAKC,MAAV,YAAmBJ,EAAQY,OAA3B,YAAqCZ,EAAQiB,cAClD,4BAAKjB,EAAQK,cACb,4BAAKL,EAAQiB,aACb,4BACE,kBAAC,EAAD,CAAQJ,OAAQb,EAAQkB,cChBzB8H,EAAsB,SAAA9D,GACjC,IAAMlF,EAAU8H,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAJxB,sDAI+CuB,GAAmBxB,QAD3C,EAElB6F,mBAAS,IAFS,mBAEnCzH,EAFmC,KAE7B0H,EAF6B,KAI1CC,qBAAU,WACJjI,GACFgI,GAAQ,SAAA1H,GACN,IAAI4H,EAAQ5H,EAAK6H,WAAU,SAAAC,GAAK,OAAIA,EAAMC,OAASrI,EAAQK,gBAC3D,OAAe,IAAX6H,GAVkB,KAWhB5H,EAAK0G,QACP1G,EAAKgI,QAED,GAAN,mBAAWhI,GAAX,CAAiB,CAAC+H,KAAMrI,EAAQK,aAAckG,EAAGvG,EAAQa,YAEzDP,EAAK4H,GAAO3B,GAAKvG,EAAQa,OAClB,YAAIP,SAIhB,CAACN,IAEJ,IAAI2F,EAAIrF,EAAK0G,OAASlG,KAAKyH,IAAL,MAAAzH,KAAI,YAAQR,EAAKsG,KAAI,SAAAN,GAAC,OAAIA,EAAEC,OAAM,EACpDiC,EAAQlI,EAAKqD,QAAO,SAAC8E,EAAaC,GAAd,OAA+BD,EAAcC,EAAanC,IAAG,GACjFU,EAAgB,IAAVuB,EAAc,EAAIA,EAAQlI,EAAK0G,OAEzC,OACE,yBAAKnB,MAAO,CAACE,OAAQ,OAAQ4C,aAAc,YACzC,kBAAC,EAAD,CACErI,KAAMA,EACNqG,kBA/BsB,GAgCtBhB,EAAGA,EACHsB,IAAKA,EACLI,mBAAyB,EAAJ1B,EAAS,MAEhC,kDACoB,kBAAC,EAAD,CAAQ9E,OAAQoG,OCrC7BgC,EAAoB,SAAA/D,GAC/B,IAAMnB,EAAe+D,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAH7B,sDAGoDuB,GAAmBK,gBAE1F,OACE,6BACE,6CACA,6BACE,kBAAC,EAAD,CAAQlD,OAAQkD,GAAgB,OCR3BmF,EAAc,SAAAhE,GACzB,IAAMjD,EAAQ6F,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAHtB,sDAG6CuB,GAAmBzB,SAEnF,OACE,6BACE,sCACA,6BAAMA,KCLCkH,EAAc,SAAAjE,GACzB,IAAM/C,EAAW2F,aAAY,SAAAtF,GAAK,OAAIA,EAAML,SAHzB,sDAGgDuB,GAAmBvB,YAEtF,OACE,+BACE,+BACE,4BACE,wBAAI0D,MAAO,CAACkD,UAAW,SAAvB,SACA,wBAAIlD,MAAO,CAACkD,UAAW,SAAvB,QACA,wBAAIlD,MAAO,CAACkD,UAAW,UAAvB,SAGJ,+BACG5G,EAASyE,KAAI,SAAA5G,GAAO,OACnB,wBAAI8G,IAAG,UAAK3G,KAAKC,MAAV,YAAmBJ,EAAQW,OAChC,4BAAKX,EAAQK,cACb,4BAAKL,EAAQW,MACb,4BACE,kBAAC,EAAD,CAAQE,OAAQb,EAAQa,iBCLzBuI,EAAY,SAAAlE,GACvB,IAAMmE,EAAavB,aAAY,SAAAtF,GAAK,OAAIA,EAAMD,UAH3B,sDAGmDQ,WAAWG,UAEjF,OACE,iCACE,4BAAQ2C,MAAO,CAACyD,QAAS,OAAQC,cAAe,MAAOC,WAAY,SAAUC,QAAS,oBACpF,yBACE5D,MAAO,CACL6D,WC5BU,UD6BVJ,QAAS,eACTG,QAAS,MACTE,aAAc,QAGhB,yBAAK9D,MAAO,CAACE,OAAQ,GAAID,MAAO,KAC9B,yBAAK8D,GAAG,iBAAiBnE,QAAQ,aAC/B,0BACEe,KCpCK,UDqCLF,EAAE,0QAEJ,0BACEE,KCxCK,UDyCLF,EAAE,oRAEJ,0BACEE,KC5CK,UD6CLF,EAAE,4JAEJ,0BACEE,KChDK,UDiDLF,EAAE,8IAKV,yBACET,MAAO,CACLgE,OAAO,aAAD,OCzDI,WD0DVF,aAAc,MACdF,QAAS,kBACTK,SAAU,WACVC,KAAM,WACNC,OAAQ,OAGV,0BACEnE,MAAO,CACLoE,gBAAiBZ,EAAa,OCpEvB,UDqEPM,aAAc,MACdL,QAAS,eACTxD,MAAO,MACPC,OAAQ,MACRmE,cAAe,SACfC,OAAQ,YACRC,UAAWf,EAAa,KAAO,sCAGnC,sFAIJ,yBAAKxD,MAAO,CAACyD,QAAS,OAAQC,cAAe,QAC3C,yBAAK1D,MAAO,CAAC4D,QAAS,kBACpB,wCACA,kBAAC,EAAD,MACA,yBAAK5D,MAAO,CAACE,OAAQ,SACrB,kBAAC,EAAD,MACA,yBAAKF,MAAO,CAACE,OAAQ,SACrB,kBAAC,EAAD,MACA,yBAAKF,MAAO,CAACE,OAAQ,SACrB,kBAAC,EAAD,OAEF,yBAAKF,MAAO,CAAC4D,QAAS,kBACpB,0CACA,kBAAC,EAAD,MACA,yBAAK5D,MAAO,CAACE,OAAQ,SACrB,kBAAC,EAAD,MACA,yBAAKF,MAAO,CAACE,OAAQ,SACrB,kBAAC,EAAD,MACA,yBAAKF,MAAO,CAACE,OAAQ,SACrB,kBAAC,EAAD,UEvBGsE,EAA0B,SACrCvH,EACAD,GAFqC,OAGlC,SAAAyH,IA/EY,SAACxH,EAAgBD,GAAjB,OAAmC,SAAAyH,GAClDA,EAAS,CACP1H,KfJ6B,oBeK7BE,iBACAD,kBAGF,IAAM0H,EAAO,IAAIC,UAAU3H,GAE3B0H,EAAKE,OAAS,SAAAnH,GACZgH,EAAS,CACP1H,KfZsC,+BeatCE,iBACAD,gBACAS,WAIJiH,EAAKG,QAAU,SAAApH,GACbgH,EAAS,CACP1H,KfnBsC,+BeoBtCE,iBACAD,gBACAS,WAIJiH,EAAKI,QAAU,SAAArH,GACbgH,EAAS,CACP1H,Kf3BqC,8Be4BrCE,iBACAD,gBACAS,WAIJiH,EAAKK,UAAY,SAAAtH,GACfgH,EAAS,CACP1H,KflCsC,+BemCtCE,iBACAD,gBACAS,UAEF,IAAIuH,SAAQ,SAACC,EAASC,GACpB,IAAK,IAAD,EAC8B,oBAA5B,UAAOzH,EAAMhD,YAAb,aAAO,EAAY0K,MACrB1H,EAAMhD,KACH0K,OACAC,MAAK,SAAA3K,GAAI,OAAIwK,EAAQxK,MACrB4K,OAAM,SAAA3H,GAAG,OAAIwH,EAAOxH,MAEvBuH,EAAQK,KAAKC,MAAM9H,EAAMhD,OAE3B,MAAOiD,GACPwH,EAAOxH,OAGR0H,MAAK,SAAA3K,GACJgK,EAAS,CACP1H,KftD6C,0CeuD7CE,iBACAD,gBACAvC,YAGH4K,OAAM,SAAA3H,GACL+G,EAAS,CACP1H,Kf7D0C,uCe8D1CE,iBACAD,gBACAU,aAUR8H,CAASvI,EAAgBD,EAAzBwI,CAAwCf,KC3E7BgB,EAAQ,SAAApG,GAInB,OAHiBqG,aACjBjB,CAASkB,EAAgC,GAAI,uDAEtC,kBAAC,EAAD,OCRIC,EAAU,SAAAvG,GAAK,OAC1B,iCACE,6CACA,6BACE,kBAAC,IAAD,CAAMwG,GAAG,IAAIC,SAAS,MACpB,uCCDKC,GAAO,SAAA1G,GAAK,OACvB,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2G,OAAK,EAACC,KAAK,OAAOC,UAAWN,IAEpC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,aAAaC,UAAW3C,IAEpC,kBAAC,IAAD,CAAUsC,GAAG,YCNNM,GAAM,SAAA9G,GACjB,OACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,IAAD,CAAQ4H,SAAUC,aAChB,kBAAC,EAAD,KACE,kBAAC,GAAD,UCFUC,QACW,cAA7BxH,OAAOyH,SAASC,UAEe,UAA7B1H,OAAOyH,SAASC,UAEhB1H,OAAOyH,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd9B,OAAM,SAAA9F,GACL6H,QAAQ7H,MAAMA,EAAMpF,c","file":"static/js/main.f4aa103d.chunk.js","sourcesContent":["export class MessageBlock {\n  constructor(message) {\n    this.timestamp = Date.now();\n    this.message = message;\n    this.block_number = message.data.number;\n  }\n}\n\nexport class MessageEvent {\n  constructor(message) {\n    this.timestamp = Date.now();\n    this.message = message;\n    this.block_number = message.block_number;\n    this.txhash = message.txhash;\n  }\n}\n\nexport class MessageBounty extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.guid = message.data.guid;\n    this.author = message.data.author;\n    this.amount = message.data.amount / Math.pow(10, 18);\n  }\n}\n\nexport class MessageAssertion extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.bounty_guid = message.data.bounty_guid;\n    this.author = message.data.author;\n    this.bid = message.data.bid / Math.pow(10, 18);\n  }\n}\n\nexport class MessageReveal extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.bounty_guid = message.data.bounty_guid;\n    this.author = message.data.author;\n    this.verdict = message.data.verdicts[0];\n  }\n}\n\nexport class MessageSettled extends MessageEvent {\n  constructor(message) {\n    super(message);\n\n    this.bounty_guid = message.data.bounty_guid;\n    this.payout = message.data.payout / Math.pow(10, 18);\n  }\n}\n","export const BLOCK = \"block\";\nexport const BOUNTY = \"bounty\";\nexport const ASSERTION = \"assertion\";\nexport const REVEAL = \"Reveal\";\nexport const VOTE = \"Vote\";\nexport const QUORUM = \"Quorum\";\nexport const SETTLED = \"settled_bounty\";\nexport const INITIALIZED_CHANNEL = \"Initialized Channel\";\n","import produce from \"immer\";\n\nimport * as entities from \"./entities\";\nimport * as eventTypes from \"./eventTypes\";\n\nimport * as communityActionTypes from \"../community/communityActionTypes\";\n\nconst LIMIT = 20;\n\nlet _producer = (entity, draftState) => {\n  draftState.count += 1;\n  draftState.last = entity;\n  draftState.messages = [entity, ...draftState.messages.slice(0, LIMIT)];\n};\n\nexport const messagesReducer = (state = {}, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case communityActionTypes.COMMUNITY_CONNECT:\n        draft[action.community_url] = Object.keys(eventTypes).reduce(\n          (acc, cur) => {\n            acc[eventTypes[cur]] = {\n              count: 0,\n              last: null,\n              messages: [],\n            };\n            return acc;\n          },\n          {},\n        );\n        return;\n\n      case communityActionTypes.COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED:\n        let entity;\n        let draftState;\n\n        switch (action.data.event) {\n          case eventTypes.BLOCK:\n            entity = new entities.MessageBlock(action.data);\n            draftState = draft[action.community_url][eventTypes.BLOCK];\n            _producer(entity, draftState);\n            return;\n\n          case eventTypes.BOUNTY:\n            entity = new entities.MessageBounty(action.data);\n            draftState = draft[action.community_url][eventTypes.BOUNTY];\n            _producer(entity, draftState);\n            draftState.total_amount = (draftState.total_amount || 0) + entity.amount;\n            return;\n\n          case eventTypes.ASSERTION:\n            entity = new entities.MessageAssertion(action.data);\n            draftState = draft[action.community_url][eventTypes.ASSERTION];\n            _producer(entity, draftState);\n            draftState.total_bid = (draftState.total_bid || 0) + entity.bid;\n            return;\n\n          case eventTypes.REVEAL:\n            entity = new entities.MessageReveal(action.data);\n            draftState = draft[action.community_url][eventTypes.REVEAL];\n            _producer(entity, draftState);\n            return;\n\n          case eventTypes.SETTLED:\n            entity = new entity.MessageSettled(action.data);\n            draftState = draft[action.community_url][eventTypes.SETTLED];\n            _producer(entity, draftState);\n            draftState.total_payout = (draftState.total_payout || 0) + entity.payout;\n            return;\n\n          default:\n            return;\n        }\n\n      default:\n        return;\n    }\n  });\n","import {combineReducers} from \"redux\";\n\nimport {communityReducer} from \"./community/communityReducer\";\nimport {messagesReducer} from \"./messages/messagesReducer\";\n\nconst _reducer = combineReducers({\n  community: communityReducer,\n  messages: messagesReducer,\n});\n\nexport const reducer = (state, action) => {\n  return _reducer(state, action);\n};\n","import produce from \"immer\";\n\nimport * as actionTypes from \"./communityActionTypes\";\n\nexport const communityReducer = (state = {}, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case actionTypes.COMMUNITY_CONNECT:\n        draft[action.community_url] = {\n          community_name: action.community_name,\n          community_url: action.community_url,\n          connection: {\n            initiated: Date.now(),\n            succeded: null,\n            closed: null,\n            errors: [],\n          },\n          messages: {\n            last: null,\n            last_error: null,\n          },\n        };\n        return;\n\n      case actionTypes.COMMUNITY_CONNECT__SUCCEEDED:\n        draft[action.community_url].connection.succeded = Date.now();\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION__CLOSED:\n        draft[action.community_url].connection.closed = Date.now();\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION__ERROR:\n        draft[action.community_url].connection.errors.push({\n          timestamp: Date.now(),\n          event: action.event,\n        });\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION_MESSAGE:\n        draft[action.community_url].messages.last = {\n          timestamp: Date.now(),\n          event: action.event,\n        };\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED:\n        return;\n\n      case actionTypes.COMMUNITY_CONNECTION_MESSAGE__FAILED:\n        draft[action.community_url].messages.last_error = {\n          timestamp: Date.now(),\n          err: action.err,\n        };\n        return;\n\n      default:\n        return;\n    }\n  });\n","export const COMMUNITY_CONNECT = \"COMMUNITY_CONNECT\";\nexport const COMMUNITY_CONNECT__SUCCEEDED = \"COMMUNITY_CONNECT__SUCCEEDED\";\n\nexport const COMMUNITY_CONNECTION__CLOSED = \"COMMUNITY_CONNECTION__CLOSED\";\nexport const COMMUNITY_CONNECTION__ERROR = \"COMMUNITY_CONNECTION__ERROR\";\n\nexport const COMMUNITY_CONNECTION_MESSAGE = \"COMMUNITY_CONNECTION_MESSAGE\";\nexport const COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED = \"COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED\";\nexport const COMMUNITY_CONNECTION_MESSAGE__FAILED = \"COMMUNITY_CONNECTION_MESSAGE__FAILED\";\n","import {applyMiddleware, compose, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport {reducer} from \"./reducer\";\n\nconst configureStore = () => {\n  const middlewareEnhancer = applyMiddleware(thunk);\n\n  const composedEnhancers = compose(\n    middlewareEnhancer,\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : f => f,\n  );\n\n  const store = createStore(reducer, undefined, composedEnhancers);\n  return store;\n};\n\nexport const store = configureStore();\n","import React from \"react\";\nimport P from \"prop-types\";\n\nexport class ErrorBoundary extends React.Component {\n  static propTypes = {\n    children: P.node\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {hasError: true, error};\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong. Please reload the page</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from \"react\";\nimport P from \"prop-types\";\n\nexport const Svg = props => {\n  return (\n    <svg\n      viewBox={`0 0 ${props.W} ${props.H}`}\n      preserveAspectRatio=\"none\"\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      {props.children}\n    </svg>\n  );\n};\n\nSvg.propTypes = {\n  W: P.number.isRequired,\n  H: P.number.isRequired,\n  children: P.array.isRequired,\n};\n\nexport const SvgBar = props => {\n  let _posX = props.W - props.w - (props.w + props.gapW) * (props.noOfDataPoints - props.currentDataPointIndex - 1);\n  return <path d={`M ${_posX} ${props.H} v -${props.h} h ${props.w} v ${props.h} Z`} fill={props.fill} />;\n};\n\nSvgBar.propTypes = {\n  fill: P.string.isRequired,\n  currentDataPointIndex: P.number.isRequired,\n  noOfDataPoints: P.number.isRequired,\n  gapW: P.number.isRequired,\n  W: P.number.isRequired,\n  H: P.number.isRequired,\n  w: P.number.isRequired,\n  h: P.number.isRequired,\n};\n\nexport const SvgBarChart = props => {\n  let _W = props.maxNoOfDataPoints * (props.w + props.gapW) - props.gapW;\n  return (\n    <Svg W={_W} H={props.H}>\n      {props.data.map((data, i) => (\n        <SvgBar\n          key={i}\n          fill={props.barFill}\n          currentDataPointIndex={i}\n          noOfDataPoints={props.data.length}\n          gapW={props.gapW}\n          W={_W}\n          H={props.H}\n          w={props.w}\n          h={data.h}\n        />\n      ))}\n      <path\n        d={`M 0 ${props.H} m 0 -${props.avg} l ${_W} 0`}\n        stroke={props.avgLineStrokeColor}\n        strokeWidth={props.avgLineStrokeWidth}\n      />\n    </Svg>\n  );\n};\n\nSvgBarChart.propTypes = {\n  data: P.array.isRequired,\n  maxNoOfDataPoints: P.number.isRequired,\n  avgLineStrokeColor: P.string,\n  avgLineStrokeWidth: P.number,\n  barFill: P.string,\n  gapW: P.number,\n  H: P.number.isRequired,\n  w: P.number,\n};\n\nSvgBarChart.defaultProps = {\n  avgLineStrokeColor: \"#7bfa7f\",\n  barFill: \"#6d3aec\",\n  gapW: 1,\n  w: 10,\n};\n","import React from \"react\";\n\nexport const Nectar = props => {\n  let amount = props.amount.toFixed(8);\n  let [integer, decimal] = amount.split(\".\");\n\n  return (\n    <span>\n      <span>{integer}</span>\n      <span style={{opacity: 0.64}}>\n        <span>.</span>\n        <span>{decimal}</span>\n      </span>\n      <span>NCT</span>\n    </span>\n  );\n};\n","import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {SvgBarChart} from \"components/charting/SvgBarChart\";\nimport {Nectar} from \"components/Nectar\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\nconst max_no_of_data_points = 20;\n\nexport const AssertionBidByBlock = props => {\n  const message = useSelector(state => state.messages[community_id][eventTypes.ASSERTION].last);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (message) {\n      setData(data => {\n        let index = data.findIndex(block => block.name === message.block_number);\n        if (index === -1) {\n          if (data.length === max_no_of_data_points) {\n            data.shift();\n          }\n          return [...data, {name: message.block_number, h: message.bid}];\n        } else {\n          data[index].h += message.bid;\n          return [...data];\n        }\n      });\n    }\n  }, [message]);\n\n  let H = data.length ? Math.max(...data.map(d => d.h)) : 0;\n  let total = data.reduce((accumulator, currentValue) => accumulator + currentValue.h, 0);\n  let avg = total === 0 ? 0 : total / data.length;\n\n  return (\n    <div style={{height: \"10em\", marginBottom: \"1.618em\"}}>\n      <SvgBarChart\n        data={data}\n        maxNoOfDataPoints={max_no_of_data_points}\n        H={H}\n        avg={avg}\n        avgLineStrokeWidth={(H * 2) / 120}\n      />\n      <div>\n        average per block <Nectar amount={avg} />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const AssertionBidTotal = props => {\n  const total_bid = useSelector(state => state.messages[community_id][eventTypes.ASSERTION].total_bid);\n\n  return (\n    <div>\n      <div>total bid</div>\n      <div>\n        <Nectar amount={total_bid || 0} />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const AssertionCount = props => {\n  const count = useSelector(state => state.messages[community_id][eventTypes.ASSERTION].count);\n\n  return (\n    <div>\n      <div>count</div>\n      <div>{count}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const AssertionTable = props => {\n  const messages = useSelector(state => state.messages[community_id][eventTypes.ASSERTION].messages);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th style={{textAlign: \"left\"}}>block</th>\n          <th style={{textAlign: \"left\"}}>bounty guid</th>\n          <th style={{textAlign: \"right\"}}>bid</th>\n        </tr>\n      </thead>\n      <tbody>\n        {messages.map(message => (\n          <tr key={`${Date.now()}-${message.author}-${message.bounty_guid}`}>\n            <td>{message.block_number}</td>\n            <td>{message.bounty_guid}</td>\n            <td>\n              <Nectar amount={message.bid} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {SvgBarChart} from \"components/charting/SvgBarChart\";\nimport {Nectar} from \"components/Nectar\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\nconst max_no_of_data_points = 20;\n\nexport const BountyAmountByBlock = props => {\n  const message = useSelector(state => state.messages[community_id][eventTypes.BOUNTY].last);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (message) {\n      setData(data => {\n        let index = data.findIndex(block => block.name === message.block_number);\n        if (index === -1) {\n          if (data.length === max_no_of_data_points) {\n            data.shift();\n          }\n          return [...data, {name: message.block_number, h: message.amount}];\n        } else {\n          data[index].h += message.amount;\n          return [...data];\n        }\n      });\n    }\n  }, [message]);\n\n  let H = data.length ? Math.max(...data.map(d => d.h)) : 0;\n  let total = data.reduce((accumulator, currentValue) => accumulator + currentValue.h, 0);\n  let avg = total === 0 ? 0 : total / data.length;\n\n  return (\n    <div style={{height: \"10em\", marginBottom: \"1.618em\"}}>\n      <SvgBarChart\n        data={data}\n        maxNoOfDataPoints={max_no_of_data_points}\n        H={H}\n        avg={avg}\n        avgLineStrokeWidth={(H * 2) / 120}\n      />\n      <div>\n        average per block <Nectar amount={avg} />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const BountyAmountTotal = props => {\n  const total_amount = useSelector(state => state.messages[community_id][eventTypes.BOUNTY].total_amount);\n\n  return (\n    <div>\n      <div>total amount</div>\n      <div>\n        <Nectar amount={total_amount || 0} />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const BountyCount = props => {\n  const count = useSelector(state => state.messages[community_id][eventTypes.BOUNTY].count);\n\n  return (\n    <div>\n      <div>count</div>\n      <div>{count}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {Nectar} from \"components/Nectar\";\nimport * as eventTypes from \"store/messages/eventTypes\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const BountyTable = props => {\n  const messages = useSelector(state => state.messages[community_id][eventTypes.BOUNTY].messages);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th style={{textAlign: \"left\"}}>block</th>\n          <th style={{textAlign: \"left\"}}>guid</th>\n          <th style={{textAlign: \"right\"}}>bid</th>\n        </tr>\n      </thead>\n      <tbody>\n        {messages.map(message => (\n          <tr key={`${Date.now()}-${message.guid}`}>\n            <td>{message.block_number}</td>\n            <td>{message.guid}</td>\n            <td>\n              <Nectar amount={message.amount} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport * as colors from \"constants/colors\";\n\nimport {AssertionBidByBlock} from \"./assertion/AssertionBidByBlock\";\nimport {AssertionBidTotal} from \"./assertion/AssertionBidTotal\";\nimport {AssertionCount} from \"./assertion/AssertionCount\";\nimport {AssertionTable} from \"./assertion/AssertionTable\";\n\nimport {BountyAmountByBlock} from \"./bounty/BountyAmountByBlock\";\nimport {BountyAmountTotal} from \"./bounty/BountyAmountTotal\";\nimport {BountyCount} from \"./bounty/BountyCount\";\nimport {BountyTable} from \"./bounty/BountyTable\";\n\n// import {SettledCount} from \"./settled/SettledCount\";\n// import {SettledPayoutTotal} from \"./settled/SettledPayoutTotal\";\n// import {SettledTable} from \"./settled/SettledTable\";\n\nconst community_id = \"wss://nu.k.polyswarm.network/v1/events/?chain=side\";\n\nexport const Dashboard = props => {\n  const connClosed = useSelector(state => state.community[community_id].connection.closed);\n\n  return (\n    <section>\n      <header style={{display: \"flex\", flexDirection: \"row\", alignItems: \"center\", padding: \"0.618em 1.618em\"}}>\n        <div\n          style={{\n            background: colors.purple,\n            display: \"inline-block\",\n            padding: \"1em\",\n            borderRadius: \"50%\",\n          }}\n        >\n          <div style={{height: 32, width: 34}}>\n            <svg id=\"polyswarm-logo\" viewBox=\"0 0 34 32\">\n              <path\n                fill={colors.white}\n                d=\"M3.624 8.457h16.707c2.5 0 4.534 2.018 4.534 4.497s-2.034 4.497-4.534 4.497h-9.040c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h9.039c3.924 0 7.116-3.166 7.116-7.058s-3.192-7.058-7.116-7.058h-16.706c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28z\"\n              />\n              <path\n                fill={colors.white}\n                d=\"M20.331 0h-6.479c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h6.479c5.778 0 10.479 4.662 10.479 10.394s-4.701 10.393-10.479 10.393h-16.46c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h16.459c7.202 0 13.060-5.811 13.060-12.954s-5.858-12.954-13.060-12.954z\"\n              />\n              <path\n                fill={colors.white}\n                d=\"M12.846 12.954c0-0.706-0.579-1.28-1.291-1.28h-3.146c-0.712 0-1.291 0.574-1.291 1.28 0 0.709 0.571 1.28 1.043 1.28h3.146c0.906 0 1.539-0.527 1.539-1.28z\"\n              />\n              <path\n                fill={colors.white}\n                d=\"M8.76 29.243h-7.469c-0.712 0-1.291 0.574-1.291 1.28s0.579 1.28 1.291 1.28h7.469c0.712 0 1.291-0.574 1.291-1.28s-0.579-1.28-1.291-1.28z\"\n              />\n            </svg>\n          </div>\n        </div>\n        <div\n          style={{\n            border: `1px solid ${colors.purple}`,\n            borderRadius: \"1em\",\n            padding: \"0.382em 1.618em\",\n            position: \"relative\",\n            left: \"-1.618em\",\n            zIndex: \"-1\",\n          }}\n        >\n          <span\n            style={{\n              backgroundColor: connClosed ? \"#f00\" : colors.green,\n              borderRadius: \"50%\",\n              display: \"inline-block\",\n              width: \"1em\",\n              height: \"1em\",\n              verticalAlign: \"middle\",\n              margin: \"0 0.382em\",\n              animation: connClosed ? null : \"beacon 1.2s infinite ease-in-out\",\n            }}\n          />\n          <span>wss://nu.k.polyswarm.network/v1/events/?chain=side</span>\n        </div>\n      </header>\n\n      <div style={{display: \"flex\", flexDirection: \"row\"}}>\n        <div style={{padding: \"0 0 0 1.618em\"}}>\n          <h3>bounties</h3>\n          <BountyAmountByBlock />\n          <div style={{height: \"1em\"}} />\n          <BountyCount />\n          <div style={{height: \"1em\"}} />\n          <BountyAmountTotal />\n          <div style={{height: \"1em\"}} />\n          <BountyTable />\n        </div>\n        <div style={{padding: \"0 0 0 1.618em\"}}>\n          <h3>assertions</h3>\n          <AssertionBidByBlock />\n          <div style={{height: \"1em\"}} />\n          <AssertionCount />\n          <div style={{height: \"1em\"}} />\n          <AssertionBidTotal />\n          <div style={{height: \"1em\"}} />\n          <AssertionTable />\n        </div>\n        {/* <div>\n          <h3>settled bounties</h3>\n          <SettledCount />\n          <SettledPayoutTotal />\n          <SettledTable />\n        </div> */}\n      </div>\n    </section>\n  );\n};\n","export const green = \"#7bfa7f\";\nexport const purple = \"#6d3aec\";\nexport const white = \"#ffffff\";\n","import * as actionTypes from \"./communityActionTypes\";\n\nconst _connect = (community_name, community_url) => dispatch => {\n  dispatch({\n    type: actionTypes.COMMUNITY_CONNECT,\n    community_name,\n    community_url,\n  });\n\n  const conn = new WebSocket(community_url);\n\n  conn.onopen = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECT__SUCCEEDED,\n      community_name,\n      community_url,\n      event,\n    });\n  };\n\n  conn.onclose = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECTION__CLOSED,\n      community_name,\n      community_url,\n      event,\n    });\n  };\n\n  conn.onerror = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECTION__ERROR,\n      community_name,\n      community_url,\n      event,\n    });\n  };\n\n  conn.onmessage = event => {\n    dispatch({\n      type: actionTypes.COMMUNITY_CONNECTION_MESSAGE,\n      community_name,\n      community_url,\n      event,\n    });\n    new Promise((resolve, reject) => {\n      try {\n        if (typeof event.data?.text === \"function\") {\n          event.data\n            .text()\n            .then(data => resolve(data))\n            .catch(err => reject(err));\n        } else {\n          resolve(JSON.parse(event.data));\n        }\n      } catch (err) {\n        reject(err);\n      }\n    })\n      .then(data => {\n        dispatch({\n          type: actionTypes.COMMUNITY_CONNECTION_MESSAGE__SUCCEEDED,\n          community_name,\n          community_url,\n          data,\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: actionTypes.COMMUNITY_CONNECTION_MESSAGE__FAILED,\n          community_name,\n          community_url,\n          err,\n        });\n      });\n  };\n};\n\nexport const registerCommunityAction = (\n  community_name,\n  community_url,\n) => dispatch => {\n  _connect(community_name, community_url)(dispatch);\n};\n","import React from \"react\";\nimport {useDispatch} from \"react-redux\";\n\nimport * as actions from \"store/community/communityActions\";\n\nimport {Dashboard} from \"../dashboard/Dashboard\";\n\nexport const Front = props => {\n  const dispatch = useDispatch();\n  dispatch(actions.registerCommunityAction(\"\", \"wss://nu.k.polyswarm.network/v1/events/?chain=side\"));\n\n  return <Dashboard />;\n};\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport const NoMatch = props => (\n  <section>\n    <h2>404 Not Found</h2>\n    <div>\n      <Link to=\"/\" tabIndex=\"-1\">\n        <span>/</span>\n      </Link>\n    </div>\n  </section>\n);\n","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\n\nimport {Dashboard} from \"../dashboard/Dashboard\";\nimport {Front} from \"../front/Front\";\nimport {NoMatch} from \"../nomatch/NoMatch\";\n\nexport const Main = props => (\n  <main>\n    <Switch>\n      <Route exact path=\"/404\" component={NoMatch} />\n\n      <Route exact path=\"/\" component={Front} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n\n      <Redirect to=\"/404\" />\n    </Switch>\n  </main>\n);\n","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport {store} from \"../store/store\";\nimport {ErrorBoundary} from \"../components/error/ErrorBoundary\";\n\nimport {Main} from \"./main/Main\";\n\nexport const App = props => {\n  return (\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <ErrorBoundary>\n          <Main />\n        </ErrorBoundary>\n      </Router>\n    </Provider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.scss\";\nimport {App} from \"./views/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}